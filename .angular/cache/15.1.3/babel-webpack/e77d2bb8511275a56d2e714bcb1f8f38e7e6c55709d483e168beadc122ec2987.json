{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DNI, NAME, USERNAME, ROUTE_CONTROL_ACCESS, ENCRIPTING_KEY, UNLOCK_REQUESTED } from '../app.constants';\nimport { BehaviorSubject } from 'rxjs';\nimport * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/storage-angular\";\nimport * as i2 from \"ngx-cookie-service\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    // currentUserListener: BehaviorSubject<Employee>;\n    // public readonly currentUser: Observable<Employee>;\n    constructor(storage, cookies) {\n      this.storage = storage;\n      this.cookies = cookies;\n      this.employeeBd = null;\n      this.center = {};\n      // Control employee account\n      this.isValidate = false;\n      this.isValid = false;\n      this.init();\n      this.employeeListener = new BehaviorSubject(this.actualToken);\n      this.token = this.employeeListener.asObservable();\n      // this.currentUserListener= new BehaviorSubject (this.employee);\n      // this.currentUser= this.currentUserListener.asObservable();\n    }\n    /**\n     * Define el usuario a su servicio de control\n     *\n     * @param data Empleado que accede\n     */\n    setUser(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Se establecen los datos del empleado\n        // en el servicio dedicado\n        this.employee = data.data.user;\n        this.set(ROUTE_CONTROL_ACCESS, 1);\n        this.set(UNLOCK_REQUESTED, false);\n        // Se comprueban y actualizan los datos en\n        // caso necesario.\n        this.updateEmployeeData().then(res => {\n          if (res !== undefined) {\n            if (res.dni !== this.employee.dni) {\n              this.set(DNI, CryptoJS.AES.encrypt(this.employee.dni, ENCRIPTING_KEY).toString());\n            }\n            if (res.name !== this.employee.name) {\n              this.set(NAME, this.employee.name);\n            }\n            if (res.username !== this.employee.username) {\n              this.set(USERNAME, this.employee.username);\n            }\n          } else {\n            this.set(DNI, this.employee.dni);\n            this.set(NAME, this.employee.name);\n            this.set(USERNAME, this.employee.username);\n          }\n        });\n        this.actualToken = data.data.access_token;\n        this.setToken(this.actualToken);\n        this.saveCurrentToken(this.actualToken);\n        // this.saveCurrentUser(this.employee);\n      });\n    }\n\n    saveCurrentToken(token) {\n      this.employeeListener.next(token);\n    }\n    // saveCurrentUser(user: Employee): void {\n    //   this.employeeListener.next(user);\n    // }\n    // getCurrentUser(): Employee {\n    //   return this.currentUserListener.getValue();\n    // }\n    /**\n     * Actualizacion de datos locales guardados\n     * en dispositivo\n     *\n     * @returns Objeto de datos\n     */\n    updateEmployeeData() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let employeeData;\n        yield this.get(DNI).then(val => {\n          employeeData = {};\n          employeeData.dni = val;\n        });\n        yield this.get(NAME).then(val => {\n          employeeData.name = val;\n        });\n        yield this.get(USERNAME).then(value => {\n          employeeData.username = value;\n        });\n        return employeeData;\n      });\n    }\n    /**\n     * Crea un objecto de tipo\n     *\n     * @param center\n     * @returns Center object\n     */\n    createCenter(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (data !== undefined && data.centres !== undefined) {\n          this.center.centre = data.centres[0].centre;\n          this.center.centre_address = data.centres[0].centre_address;\n          this.center.centre_phone = data.centres[0].centre_phone;\n          this.center.centre_email = data.centres[0].centre_email;\n          this.center.timetable = data.centres[0].timetable;\n          this.center.island = data.centres[0].island;\n          this.center.supervisor = data.supervisor;\n          this.center.image = data.centres[0].image;\n          return this.center;\n        }\n      });\n    }\n    /**\n     * Init storage\n     */\n    init() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const storage = yield this.storage.create();\n        this.employeeBd = storage;\n      });\n    }\n    /**\n     * Set new key and value in local bd\n     *\n     * @param key Key\n     * @param value Value save\n     */\n    set(key, value) {\n      var _a;\n      return __awaiter(this, void 0, void 0, function* () {\n        yield (_a = this.employeeBd) === null || _a === void 0 ? void 0 : _a.set(key, value);\n      });\n    }\n    /**\n     * Get Value bd Local\n     *\n     * @param key key search bd\n     * @returns Value\n     */\n    get(key) {\n      var _a;\n      return __awaiter(this, void 0, void 0, function* () {\n        const value = yield (_a = this.employeeBd) === null || _a === void 0 ? void 0 : _a.get(key);\n        return value;\n      });\n    }\n    /**\n     * Get all the registries saved in database and push them to an array\n     *\n     * @returns Collection keys\n     */\n    getAll() {\n      const collection = [];\n      this.employeeBd.forEach(value => {\n        collection.push(value);\n        console.log(value);\n      });\n      return collection;\n    }\n    /**\n     * Get the current size/length of this database\n     *\n     * @returns Count\n     */\n    count() {\n      var _a;\n      return (_a = this.employeeBd) === null || _a === void 0 ? void 0 : _a.length();\n    }\n    /**\n     * Delete info\n     *\n     * @returns Status operation\n     */\n    delete(key) {\n      var _a;\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield (_a = this.employeeBd) === null || _a === void 0 ? void 0 : _a.remove(key);\n          return true;\n        } catch (ex) {\n          console.log(ex);\n          return false;\n        }\n      });\n    }\n    clearStorage() {\n      var _a;\n      return __awaiter(this, void 0, void 0, function* () {\n        yield (_a = this.employeeBd) === null || _a === void 0 ? void 0 : _a.clear();\n      });\n    }\n    setToken(token) {\n      this.cookies.set(\"token\", token);\n    }\n    getToken() {\n      return this.cookies.get(\"token\");\n    }\n    deleteToken() {\n      return this.cookies.delete(\"token\");\n    }\n  }\n  EmployeeService.ɵfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.ɵɵinject(i1.Storage), i0.ɵɵinject(i2.CookieService));\n  };\n  EmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.ɵfac,\n    providedIn: 'root'\n  });\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}