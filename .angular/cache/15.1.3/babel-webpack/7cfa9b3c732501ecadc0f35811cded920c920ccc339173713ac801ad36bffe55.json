{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { HOME } from '../app.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./employee.service\";\nimport * as i3 from \"./notifications.service\";\nexport let AuthGuardService = /*#__PURE__*/(() => {\n  class AuthGuardService {\n    constructor(router, employeeSvc, notification) {\n      this.router = router;\n      this.employeeSvc = employeeSvc;\n      this.notification = notification;\n    }\n    canActivate() {\n      return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n        this.employeeSvc.employeeListener.subscribe(res => {\n          if (res) {\n            resolve(true);\n          } else {\n            this.notification.generallyClose();\n            this.router.navigate([HOME]);\n            resolve(false);\n          }\n        });\n      }));\n    }\n  }\n  AuthGuardService.ɵfac = function AuthGuardService_Factory(t) {\n    return new (t || AuthGuardService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.EmployeeService), i0.ɵɵinject(i3.NotificationsService));\n  };\n  AuthGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuardService,\n    factory: AuthGuardService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuardService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}