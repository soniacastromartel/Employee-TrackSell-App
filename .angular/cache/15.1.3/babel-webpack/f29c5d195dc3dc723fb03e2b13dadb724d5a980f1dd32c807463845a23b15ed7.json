{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { FaqComponent } from '../components/faq/faq.component';\nimport { UtilsService } from '../services/utils.service';\nimport { MAX_TIME_LOADING, DEV_WORD_CREATE_FILE_ENVIRONMENT, CONFIRMATION_CREATION_IOS_FILE, ERROR_CREATE_FILE, CABECERA_LOGIN, SCROLLING_TIME, POLICY_PRIVACY, SEND_CHANGE_REQUEST, CANCEL_OPTION, DNI, IMCOMPLETE_DATA, LOGO_WORD, PRIVACY_WORD, NOT_FOUND, LOADING_CONTENT, PASSWORD_CHANGED, ERROR_CHANGE_PASSWORD, RESPONSE_HACK, DENIED_ACTION, USERNAME, RESPONSE_INVALID_SECRET, RESPONSE_REQUESTED, REQUEST_IN_PROCESS, INIT_SESION_REQUIRED, INCORRECT_SECRET_WORD, RESPONSE_LOGIN_SUCCESFULL, NAME, RESPONSE_OK_RESULT, ERROR, EMPTY_STRING, CONECTING, EMPLOYEE_NO_FOUND, INVALID_CREDENTIALS, EMPLOYEE_PENDING_VALIDATION, RESPONSE_NO_VALID, RESPONSE_INVALID_CREDENTIALS, RESPONSE_PENDING_VALIDATION, RESPONSE_PENDING_CHANGE_PASSWORD, DASHBOARD, PRE_REGISTER_LOST, RESPONSE_BLOCK_ACCOUNT, BLOCK_ACCOUNT, RESPONSE_REGISTERED, USER_EXIST_SYSTEM, REQUEST_ACCESS, ERROR_IN_LOGIN, ROUTE_CONTROL_ACCESS, VERSION_APP, MODE_ACTIVE, SUM_ACCESS, USER_VALIDADO, YA_VALIDADO, CORDOVA_PLATFORM, ANDROID_TYPE, IOS_TYPE, ONLY_IOS_ACTION, PERSON_ICON, CLOSE_ICON, NEW_REQUEST_ACCESS, LOG_TYPE, LOG_PLACE, SESION_EXPIRED, UNLOCK_REQUESTED } from '../app.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/notifications.service\";\nimport * as i2 from \"../services/datacheck.service\";\nimport * as i3 from \"../services/employee.service\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"../services/utils.service\";\nimport * as i7 from \"@angular/forms\";\nconst _c0 = [\"content\"];\nexport let HomePage = /*#__PURE__*/(() => {\n  class HomePage {\n    constructor(notification, checkSvc, storage, platform, route, utils) {\n      this.notification = notification;\n      this.checkSvc = checkSvc;\n      this.storage = storage;\n      this.platform = platform;\n      this.route = route;\n      this.utils = utils;\n      // ICOT Default Logo\n      this.logo = CABECERA_LOGIN;\n      // Control show/unshow pass\n      this.showPass = false;\n      // Icon show username field\n      this.iconAux = '';\n      //Control whether the account is locked or not\n      this.isLocked = false;\n      //Control whether the unlock has been requested or not\n      this.isRequested = false;\n      // Form for users to access the app\n      this.userForm = new FormGroup({\n        user: new FormControl(undefined, [Validators.minLength(3), Validators.required]),\n        pass: new FormControl(undefined, [Validators.minLength(6), Validators.required])\n      });\n      // Var control seguimiento acceso employee\n      this.routeAccessEmployee = -1;\n      // Var control developerEnvironment environmet\n      this.developerCount = 0;\n      this.backButton = this.platform.backButton.subscribe(() => {\n        if (!this.notification.loadOp && !this.notification.exitPresent) {\n          this.notification.exitApp().then(result => {\n            if (result) {\n              // eslint-disable-next-line @typescript-eslint/dot-notation\n              navigator['app'].exitApp();\n            }\n          }).catch(ex => {\n            this.notification.baseThrowAlerts(ERROR.title, ERROR.msg);\n            this.utils.createError(ex, this.storage.employee.phone, this.route.url).then(result => {\n              this.checkSvc.setErrors(result, UtilsService);\n            });\n          });\n        }\n      });\n    }\n    /**\n     * Se Recogen los centros disponibles\n     * (Si no se han recogido)\n     */\n    ionViewWillEnter() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.iconAux = PERSON_ICON;\n        this.acceptToPolicy();\n        yield this.storage.get(UNLOCK_REQUESTED).then(result => {\n          this.isRequested = result;\n        });\n        this.storage.get(ROUTE_CONTROL_ACCESS).then(result => __awaiter(this, void 0, void 0, function* () {\n          if (result === null) {\n            //aun no ha intentado acceder nunca\n            yield this.getLocaleEmployeeDt().then(res => {\n              if (res === undefined || res.dni === null || res.name === null) {\n                this.routeAccessEmployee = -1;\n              } else {\n                this.routeAccessEmployee = 0;\n              }\n            });\n          } else {\n            this.storage.get(USERNAME).then(nick => {\n              this.userForm.controls.user.setValue(nick);\n            });\n            this.routeAccessEmployee = result;\n          }\n          this.storage.set(ROUTE_CONTROL_ACCESS, this.routeAccessEmployee);\n        })).catch(ex => {\n          var _a;\n          const contactEmployee = this.storage.employee !== undefined ? (_a = this.storage.employee) === null || _a === void 0 ? void 0 : _a.phone : null;\n          this.utils.createError(ex, contactEmployee, this.route.url).then(result => {\n            this.checkSvc.setErrors(result, UtilsService);\n          });\n        });\n        this.platform.ready().then(() => {\n          if (this.platform.is(CORDOVA_PLATFORM)) {\n            let platformType;\n            if (this.platform.is(ANDROID_TYPE)) {\n              platformType = ANDROID_TYPE;\n            } else if (this.platform.is(IOS_TYPE)) {\n              platformType = IOS_TYPE;\n            }\n            this.utils.checkExistsFile().then(existsFile => {\n              if (existsFile) {\n                this.utils.readFile(platformType).then(contenido => {\n                  if (contenido !== undefined) {\n                    this.notification.alertBaseNotifications(MODE_ACTIVE.title, MODE_ACTIVE.msg + contenido);\n                    this.utils.appActionLog(LOG_TYPE[1], MODE_ACTIVE.title, MODE_ACTIVE.msg + contenido);\n                    this.checkSvc.base = contenido;\n                  }\n                }).catch(err => {\n                  this.utils.createError(err, this.storage.employee.phone, this.route.url).then(result => {\n                    this.checkSvc.setErrors(result, UtilsService);\n                  });\n                });\n              }\n            });\n          }\n        });\n        // Save version app\n        yield this.utils.getVersionApp();\n      });\n    }\n    /**\n     * Comprobacion de aceptacion de la\n     * politica de privacidad\n     */\n    acceptToPolicy() {\n      this.storage.get(PRIVACY_WORD).then(result => __awaiter(this, void 0, void 0, function* () {\n        if (result == null) {\n          yield this.notification.showPrivacy(POLICY_PRIVACY).then(resultado => {\n            if (resultado) {\n              // Save aceptacion policy privacy\n              this.storage.set(PRIVACY_WORD, true);\n            } else {\n              navigator['app'].exitApp();\n            }\n          });\n        }\n      })).catch(ex => {\n        var _a;\n        this.utils.createError(ex, (_a = this.storage.employee) === null || _a === void 0 ? void 0 : _a.phone, this.route.url).then(result => {\n          this.checkSvc.setErrors(result, UtilsService);\n        });\n      });\n    }\n    /**\n     * ComprobaciÃ³n de inicio o registro previo de usuario\n     *\n     * @returns employeeData\n     */\n    getLocaleEmployeeDt() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let totalData;\n        let employeeData;\n        // Registros locales\n        yield this.storage.count().then(count => {\n          totalData = count;\n        });\n        if (totalData > 1) {\n          employeeData = {};\n          yield this.storage.get(DNI).then(val => {\n            employeeData.dni = val;\n          });\n          yield this.storage.get(NAME).then(val => {\n            employeeData.name = val;\n          });\n          yield this.storage.get(USERNAME).then(value => {\n            employeeData.username = value;\n          });\n          return employeeData;\n        }\n      });\n    }\n    // Check user data login\n    checkUser() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let version;\n        let userData;\n        if (this.loginSubcription !== undefined) {\n          this.loginSubcription.unsubscribe();\n        }\n        if (this.utils.version === undefined) {\n          yield this.storage.get(VERSION_APP).then(result => {\n            version = result;\n          });\n        } else {\n          version = this.utils.version;\n        }\n        const data = {\n          username: this.userForm.controls.user.value.trim(),\n          password: this.userForm.controls.pass.value,\n          version: version\n        };\n        if (data.username !== undefined && data.username !== EMPTY_STRING) {\n          this.utils.controlToNotifications(MAX_TIME_LOADING);\n          this.notification.loadingData(CONECTING);\n          yield this.checkSvc.checkData(data).then(result => {\n            this.loginSubcription = result.subscribe(res => {\n              this.utils.appActionLog(LOG_TYPE[0], res.message, res.data.user.username, LOG_PLACE[0]);\n              this.actionResultLogin(res);\n            }, svError => __awaiter(this, void 0, void 0, function* () {\n              this.notification.cancelLoad();\n              this.utils.cancelControlNotifications();\n              if (svError.error.message === RESPONSE_PENDING_CHANGE_PASSWORD) {\n                this.actionResultLogin({\n                  message: RESPONSE_PENDING_CHANGE_PASSWORD\n                });\n                this.utils.appErrorLog(LOG_TYPE[2], svError.error.message, data.username + ' ' + data.password, LOG_PLACE[0]);\n              } else {\n                this.deniedChangePass(svError.error.message, {\n                  username: data.username,\n                  name: ' '\n                });\n                this.utils.appErrorLog(LOG_TYPE[2], svError.error.message, data.username + ' ' + data.password, LOG_PLACE[0]);\n                // Login incorrecto se suma el intento de acceso\n                (yield this.checkSvc.checkAccountAccess(data === null || data === void 0 ? void 0 : data.username, SUM_ACCESS)).subscribe();\n              }\n            }));\n          }).catch(ex => {\n            this.notification.cancelLoad();\n            this.utils.cancelControlNotifications();\n            this.notification.baseThrowAlerts(ERROR_IN_LOGIN.title, ERROR_IN_LOGIN.msg);\n            this.utils.createError(ex, this.storage.employee.phone, this.route.url).then(result => {\n              this.checkSvc.setErrors(result, UtilsService);\n            });\n          });\n        }\n      });\n    }\n    /**\n     * Resultado de login de usuario\n     *\n     * @param result Resultado a gestionar\n     */\n    actionResultLogin(result) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let user = result;\n        this.notification.cancelLoad();\n        const msg = result.message;\n        if (result.success && result.data !== undefined && result.data.access_token !== undefined && msg === RESPONSE_LOGIN_SUCCESFULL) {\n          console.log(result);\n          yield this.storage.setUser(result);\n          this.route.navigate([DASHBOARD]);\n          this.resetForm();\n        } else {\n          switch (msg) {\n            case RESPONSE_NO_VALID:\n              this.notification.alertBaseNotifications(EMPLOYEE_NO_FOUND.title, EMPLOYEE_NO_FOUND.msg);\n              break;\n            //empleado no encontrado\n            case RESPONSE_PENDING_VALIDATION:\n              this.notification.alertBaseNotifications(EMPLOYEE_PENDING_VALIDATION.title, EMPLOYEE_PENDING_VALIDATION.msg);\n              break;\n            // pendiente de validaciÃ³n\n            case RESPONSE_PENDING_CHANGE_PASSWORD:\n              this.changingUserPass(this.userForm.controls.user.value);\n              break;\n            //pendiente de cambiar la password\n            case RESPONSE_BLOCK_ACCOUNT:\n              this.notification.alertBaseNotifications(BLOCK_ACCOUNT.title, BLOCK_ACCOUNT.msg, this.isLocked = true, this.isRequested, {\n                name: user.data.user.name,\n                username: user.data.user.username\n              });\n              break;\n            //cuenta bloqueada\n          }\n        }\n      });\n    }\n    // Remember user pass\n    recoveryPass() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.resetForm();\n        let employeeRegisterData;\n        // Dispositivo\n        yield this.getLocaleEmployeeDt().then(employeeData => {\n          employeeRegisterData = employeeData;\n        });\n        yield this.notification.rememberPass(employeeRegisterData).then(result => __awaiter(this, void 0, void 0, function* () {\n          if (result !== undefined) {\n            if (result !== EMPTY_STRING) {\n              // Inicio previo ok\n              if ((employeeRegisterData === null || employeeRegisterData === void 0 ? void 0 : employeeRegisterData.username) != null) {\n                this.utils.controlToNotifications(MAX_TIME_LOADING);\n                this.notification.loadingData(CONECTING);\n                yield this.checkSvc.recoveryUserPass(result.toLowerCase(), employeeRegisterData !== undefined ? employeeRegisterData : null).then(res => {\n                  res.subscribe(r => __awaiter(this, void 0, void 0, function* () {\n                    this.notification.cancelLoad();\n                    this.utils.cancelControlNotifications();\n                    switch (r.message) {\n                      case RESPONSE_OK_RESULT:\n                      case RESPONSE_PENDING_CHANGE_PASSWORD:\n                        this.changingUserPass();\n                        break;\n                      case RESPONSE_REQUESTED:\n                        this.deniedChangePass(RESPONSE_OK_RESULT);\n                        break;\n                      default:\n                        this.deniedChangePass(r.message, {\n                          name: employeeRegisterData.name,\n                          username: employeeRegisterData.username\n                        });\n                        break;\n                    }\n                    // Operacion no realizada se suma el intento de acceso\n                    (yield this.checkSvc.checkAccountAccess(result, SUM_ACCESS)).subscribe();\n                  }));\n                });\n              } else {\n                // Inicio previo requerido\n                this.deniedChangePass(RESPONSE_OK_RESULT);\n              }\n            } else {\n              this.notification.alertBaseNotifications(IMCOMPLETE_DATA.title, IMCOMPLETE_DATA.msg);\n            }\n          }\n        }));\n      });\n    }\n    /**\n     * Actualizacion de password automatica\n     */\n    changingUserPass(userName) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let user = {};\n        if (this.storage.employee === undefined) {\n          yield this.storage.employeeBd.get(USERNAME).then(username_local => {\n            if (username_local !== null && user.username !== null) {\n              user.username = username_local;\n            } else {\n              user.username = userName;\n            }\n          });\n          yield this.notification.userChangePass(this.utils).then(res => __awaiter(this, void 0, void 0, function* () {\n            if (res.values.pass1 !== EMPTY_STRING) {\n              user.pass = res.values.pass1;\n            } else {\n              user = undefined;\n            }\n            this.userForm.controls.pass.setValue('');\n          }));\n          if (user !== undefined) {\n            yield this.checkSvc.userChangingPass({\n              username: user.username,\n              password: user.pass\n            }).then(result => {\n              this.utils.controlToNotifications(MAX_TIME_LOADING);\n              this.notification.loadingData(LOADING_CONTENT);\n              result.subscribe(itsOk => {\n                this.notification.cancelLoad();\n                this.utils.cancelControlNotifications();\n                if (itsOk.message === RESPONSE_OK_RESULT) {\n                  //  BIEN CONTRASEÃA CAMBIADA\n                  this.utils.appActionLog(LOG_TYPE[0], itsOk.message, user.username + ' ' + user.pass, LOG_PLACE[1]);\n                  this.notification.alertBaseNotifications(PASSWORD_CHANGED.title, PASSWORD_CHANGED.msg);\n                } else {\n                  // NO SE ACTUALIZÃ LA CONTRASEÃA\n                  this.notification.alertBaseNotifications(ERROR_CHANGE_PASSWORD.title, ERROR_CHANGE_PASSWORD.msg);\n                }\n              });\n            });\n          }\n        }\n      });\n    }\n    /**\n     * MÃ©todo auxiliar que informa denegacion de cambio de contraseÃ±a y motivo.\n     *\n     * @param motive motivo de denegaciÃ³n\n     */\n    deniedChangePass(motive, data, isRequested) {\n      return __awaiter(this, void 0, void 0, function* () {\n        switch (motive) {\n          case RESPONSE_OK_RESULT:\n            // VALIDACIÃN OK PERO NO HAY DATOS PREVIOS\n            this.notification.alertBaseNotifications(INIT_SESION_REQUIRED.title, INIT_SESION_REQUIRED.msg);\n            break;\n          case RESPONSE_NO_VALID:\n            // CUENTA NO ENCONTRADA\n            this.notification.alertBaseNotifications(NOT_FOUND.title, NOT_FOUND.msg);\n            break;\n          case RESPONSE_INVALID_CREDENTIALS:\n            // CREDENCIALES INCORRECTOS\n            this.notification.alertBaseNotifications(INVALID_CREDENTIALS.title, INVALID_CREDENTIALS.msg);\n            break;\n          case RESPONSE_PENDING_VALIDATION:\n            // CUENTA PENDIENTE DE VALIDAR\n            this.notification.alertBaseNotifications(EMPLOYEE_PENDING_VALIDATION.title, EMPLOYEE_PENDING_VALIDATION.msg);\n            break;\n          case RESPONSE_INVALID_SECRET:\n            // POSIBLE ACCESO EXTERNO, O ERROR CON CLAVE SECRETA\n            this.notification.alertBaseNotifications(INCORRECT_SECRET_WORD.title, INCORRECT_SECRET_WORD.msg);\n            break;\n          case RESPONSE_HACK:\n            //DATOS QUE NO COINCIDEN\n            this.notification.alertBaseNotifications(DENIED_ACTION.title, DENIED_ACTION.msg);\n            break;\n          case RESPONSE_BLOCK_ACCOUNT:\n            //CUENTA BLOQUEADA POR INTENTOS DE ACCESO SUPERADOS\n            this.isRequested = yield this.storage.get(UNLOCK_REQUESTED);\n            yield this.notification.alertBaseNotifications(BLOCK_ACCOUNT.title, BLOCK_ACCOUNT.msg, true, this.isRequested, data).then(() => {\n              if (!this.isRequested || this.isRequested == null) {\n                this.lockAccount(data, true);\n              } else {\n                this.notification.toastBaseInfo(REQUEST_IN_PROCESS.title, REQUEST_IN_PROCESS.msg, 'middle');\n              }\n            });\n            break;\n        }\n      });\n    }\n    /*\n    * Solicitud de nuevo accesso\n    */\n    newAccess() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.resetForm();\n        yield this.getLocaleEmployeeDt().then(res => __awaiter(this, void 0, void 0, function* () {\n          const preRegister = res;\n          // Recogida de datos\n          yield this.notification.requestAccess().then(solicitud => __awaiter(this, void 0, void 0, function* () {\n            if (solicitud !== undefined && solicitud.role !== CANCEL_OPTION) {\n              const userDni = solicitud.data.dni.toUpperCase().trim();\n              const userFullName = solicitud.data.name.toUpperCase().trim();\n              if (userDni !== undefined && userDni !== EMPTY_STRING && userFullName !== undefined && userFullName !== EMPTY_STRING && this.utils.validateDni(userDni)) {\n                let infoDevice;\n                try {\n                  infoDevice = yield this.checkSvc.getUuid();\n                } catch (ex) {\n                  infoDevice = undefined;\n                  this.utils.createError(ex, this.storage.employee.phone, this.route.url).then(result => {\n                    this.checkSvc.setErrors(result, UtilsService);\n                  });\n                  this.notification.baseThrowAlerts(ERROR.title, ex);\n                }\n                const data = yield this.utils.createInfoData(infoDevice);\n                // No hay datos guardados previamente\n                if (preRegister === undefined || preRegister !== undefined && preRegister.dni === null && preRegister.name === null) {\n                  this.goRequestAccess(userDni, userFullName, data);\n                  this.utils.appActionLog(LOG_TYPE[0], REQUEST_ACCESS.title, userDni + ' ' + userFullName, LOG_PLACE[2]);\n                  // Solicitud enviada, no ha iniciado sesiÃ³n\n                } else if (this.routeAccessEmployee === 0) {\n                  // Datos guardados previamente pero no son iguales\n                  if (preRegister.dni !== userDni || preRegister.name !== userFullName) {\n                    yield this.notification.alertBaseQuestions(NEW_REQUEST_ACCESS.title, NEW_REQUEST_ACCESS.msg).then(responseUser => {\n                      if (responseUser) {\n                        this.goRequestAccess(userDni, userFullName, data);\n                        this.utils.appActionLog(LOG_TYPE[0], NEW_REQUEST_ACCESS.title, userDni + ' ' + userFullName, LOG_PLACE[2]);\n                      }\n                    });\n                  } else {\n                    // Datos guardados previamente pero son iguales\n                    this.notification.alertBaseNotifications(REQUEST_ACCESS.title, REQUEST_ACCESS.msg);\n                    this.utils.appActionLog(LOG_TYPE[0], REQUEST_ACCESS.title, userDni + ' ' + userFullName, LOG_PLACE[2]);\n                  }\n                  // Solicitud enviada y procesada. Ya inicio sesiÃ³n\n                } else if (this.routeAccessEmployee === 1) {\n                  this.notification.alertBaseNotifications(PRE_REGISTER_LOST.title, PRE_REGISTER_LOST.msg);\n                  this.utils.appActionLog(LOG_TYPE[0], PRE_REGISTER_LOST.title, userDni + ' ' + userFullName, LOG_PLACE[2]);\n                }\n              } else {\n                // Operacion no realizada\n                this.notification.cancelLoad();\n                this.utils.cancelControlNotifications();\n                this.notification.alertBaseNotifications(IMCOMPLETE_DATA.title, IMCOMPLETE_DATA.msg);\n                this.utils.appActionLog(LOG_TYPE[1], IMCOMPLETE_DATA.msg, userDni + ' ' + userFullName, LOG_PLACE[2]);\n              }\n            }\n          })).catch(ex => {\n            var _a;\n            this.notification.baseThrowAlerts(ERROR.title, ex);\n            this.utils.createError(ex, (_a = this.storage.employee) === null || _a === void 0 ? void 0 : _a.phone, this.route.url).then(result => {\n              this.checkSvc.setErrors(result, UtilsService);\n            });\n          });\n        }));\n      });\n    }\n    /**\n     * Resultado operacion solicitud de acceso\n     */\n    responseAccess(result, dni, fullName) {\n      switch (result.message) {\n        case RESPONSE_OK_RESULT:\n        case RESPONSE_REQUESTED:\n          //SOLICITUD ENVIADA CORRECTAMENTE\n          this.notification.alertBaseNotifications(SEND_CHANGE_REQUEST.title, SEND_CHANGE_REQUEST.msg);\n          break;\n        case RESPONSE_REGISTERED:\n          //EL USUARIO EXISTE, INICIE SESIÃN\n          this.notification.alertBaseNotifications(USER_EXIST_SYSTEM.title, USER_EXIST_SYSTEM.msg);\n          break;\n        case RESPONSE_BLOCK_ACCOUNT:\n          //CUENTA BLOQUEADA\n          this.notification.alertBaseNotifications(BLOCK_ACCOUNT.title, BLOCK_ACCOUNT.msg, this.isLocked = true, this.isRequested, {\n            name: fullName\n          });\n          break;\n      }\n      if (result.message === RESPONSE_OK_RESULT || result.message === RESPONSE_REQUESTED) {\n        if (result.data !== undefined) {\n          const usernameEmployee = result.data.user;\n          this.storage.set(USERNAME, usernameEmployee);\n        }\n        // Se guardan los datos en el dispositivo [NOMBRE, DNI, USERNAME]\n        this.storage.set(NAME, fullName);\n        this.storage.set(DNI, dni);\n        this.routeAccessEmployee = 0;\n        this.storage.set(ROUTE_CONTROL_ACCESS, this.routeAccessEmployee);\n        this.storage.set(UNLOCK_REQUESTED, this.isRequested);\n      }\n    }\n    // Clear form\n    resetForm() {\n      this.userForm.controls.user.setValue(EMPTY_STRING);\n      this.userForm.controls.pass.setValue(EMPTY_STRING);\n    }\n    // Open FAQ Modal Component\n    openFAQ() {\n      this.notification.pageSvc.openFAQ(FaqComponent, false);\n      this.userForm.controls.pass.setValue(EMPTY_STRING);\n    }\n    // Scroll when focus in input\n    logScroll() {\n      const logoY = document.getElementById(LOGO_WORD).offsetHeight;\n      this.content.scrollByPoint(0, logoY, SCROLLING_TIME);\n    }\n    clearUserName() {\n      this.userForm.controls.user.setValue(undefined);\n      this.iconAux = PERSON_ICON;\n    }\n    showDeleteField() {\n      if (this.userForm.controls.user.value) {\n        this.iconAux = CLOSE_ICON;\n      } else {\n        this.iconAux = PERSON_ICON;\n      }\n    }\n    /**\n     * Cambia la var de control para mostrar/ocultar\n     * la pass introducida\n     */\n    showUnshowPass() {\n      this.showPass = !this.showPass;\n    }\n    /**\n     * Method to enable the 'developer mode' by using 'dev' as username and pressing the company logo up to ten\n     * times.\n     *\n     */\n    developerEnvironment() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.developerCount < 10) {\n          this.developerCount++;\n        } else {\n          if (this.userForm.controls.user.value === DEV_WORD_CREATE_FILE_ENVIRONMENT) {\n            yield this.notification.contentFileEnvironment().then(res => {\n              switch (res.role) {\n                case 'accept':\n                  if (res.data.values[0] !== undefined && res.data.values[0] !== EMPTY_STRING) {\n                    if (this.platform.is(IOS_TYPE)) {\n                      this.utils.createFileIOS(res.data.values[0]).then(() => {\n                        this.notification.alertBaseNotifications(CONFIRMATION_CREATION_IOS_FILE.title, CONFIRMATION_CREATION_IOS_FILE.msg).catch(ex => {\n                          this.notification.baseThrowAlerts(ERROR_CREATE_FILE.title, ERROR_CREATE_FILE.msg);\n                        });\n                      });\n                    } else {\n                      this.notification.alertBaseNotifications(ONLY_IOS_ACTION.title, ONLY_IOS_ACTION.msg);\n                    }\n                  } else {\n                    this.notification.alertBaseNotifications(IMCOMPLETE_DATA.title, IMCOMPLETE_DATA.msg);\n                  }\n                  break;\n                case 'delete':\n                  this.utils.deleteIOSFile();\n                  break;\n                default:\n                  break;\n              }\n            });\n          }\n        }\n      });\n    }\n    // Remove subcripciÃ³n backButton dispositivo\n    ionViewWillLeave() {\n      if (this.backButton !== undefined) {\n        this.backButton.unsubscribe();\n      }\n      if (this.loginSubcription !== undefined) {\n        this.loginSubcription.unsubscribe();\n      }\n      this.platform.pause.subscribe(() => {\n        this.storage.employeeListener.next(undefined);\n        this.notification.alertBaseNotifications(SESION_EXPIRED.title, SESION_EXPIRED.msg);\n      });\n    }\n    /**\n     * Metodo auxiliar privado que realiza la solicitud tras previa\n     * validacion de datos introducidos.\n     *\n     */\n    goRequestAccess(userDni, uFullName, data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.utils.controlToNotifications(MAX_TIME_LOADING);\n        this.notification.loadingData(LOADING_CONTENT);\n        (yield this.checkSvc.newEmployeeAccess({\n          dni: userDni,\n          name: uFullName,\n          infoDevice: data\n        })).subscribe(result => {\n          this.notification.cancelLoad();\n          this.utils.cancelControlNotifications();\n          this.responseAccess(result, userDni, uFullName);\n        }, err => {\n          if (err.error.message === USER_VALIDADO) {\n            this.notification.cancelLoad();\n            this.utils.cancelControlNotifications();\n            this.notification.alertBaseNotifications(YA_VALIDADO.title, YA_VALIDADO.msg);\n          }\n        });\n      });\n    }\n    lockAccount(data, isRequested) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.checkSvc.unlockRequest(data).then(() => {\n          this.storage.set(UNLOCK_REQUESTED, isRequested);\n        });\n      });\n    }\n    lockedToast() {\n      this.notification.toastBaseInfo(REQUEST_IN_PROCESS.title, REQUEST_IN_PROCESS.msg, 'middle');\n    }\n  }\n  HomePage.Éµfac = function HomePage_Factory(t) {\n    return new (t || HomePage)(i0.ÉµÉµdirectiveInject(i1.NotificationsService), i0.ÉµÉµdirectiveInject(i2.DatacheckService), i0.ÉµÉµdirectiveInject(i3.EmployeeService), i0.ÉµÉµdirectiveInject(i4.Platform), i0.ÉµÉµdirectiveInject(i5.Router), i0.ÉµÉµdirectiveInject(i6.UtilsService));\n  };\n  HomePage.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n    type: HomePage,\n    selectors: [[\"app-home\"]],\n    viewQuery: function HomePage_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ÉµÉµqueryRefresh(_t = i0.ÉµÉµloadQuery()) && (ctx.content = _t.first);\n      }\n    },\n    decls: 32,\n    vars: 7,\n    consts: [[1, \"base\"], [\"slot\", \"end\"], [\"src\", \"assets/imgs/faq.png\", 1, \"faq\", 3, \"click\"], [1, \"content\"], [\"content\", \"\"], [\"id\", \"logo\", 1, \"logo\", 3, \"src\", \"click\"], [1, \"containerForm\"], [\"autocomplete\", \"off\", 3, \"formGroup\"], [\"position\", \"floating\", 1, \"field\"], [\"size\", \"11\", 1, \"containerInput\"], [\"formControlName\", \"user\", \"type\", \"text\", \"id\", \"user\", \"name\", \"user\", \"autocapitalize\", \"off\", 3, \"placeholder\", \"ionFocus\", \"ionChange\"], [\"size\", \"1\", 1, \"containerInput\", \"ion-text-center\"], [\"size\", \"medium\", 1, \"showUnshowP\", 3, \"name\", \"click\"], [\"formControlName\", \"pass\", \"id\", \"pass\", \"name\", \"pass\", 3, \"type\", \"ionFocus\"], [1, \"recovery\", 3, \"click\"], [1, \"newAccess\", 3, \"click\"], [1, \"ion-no-border\"], [\"type\", \"submit\", \"id\", \"submit\", \"name\", \"submit\", \"expand\", \"block\", 3, \"disabled\", \"click\"]],\n    template: function HomePage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµelementStart(0, \"div\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1)(3, \"ion-img\", 2);\n        i0.ÉµÉµlistener(\"click\", function HomePage_Template_ion_img_click_3_listener() {\n          return ctx.openFAQ();\n        });\n        i0.ÉµÉµelementEnd()()();\n        i0.ÉµÉµelementStart(4, \"ion-content\", 3, 4)(6, \"ion-img\", 5);\n        i0.ÉµÉµlistener(\"click\", function HomePage_Template_ion_img_click_6_listener() {\n          return ctx.developerEnvironment();\n        });\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(7, \"div\", 6)(8, \"form\", 7)(9, \"ion-label\", 8);\n        i0.ÉµÉµtext(10, \"USUARIO\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(11, \"ion-row\")(12, \"ion-col\", 9)(13, \"ion-input\", 10);\n        i0.ÉµÉµlistener(\"ionFocus\", function HomePage_Template_ion_input_ionFocus_13_listener() {\n          return ctx.logScroll();\n        })(\"ionChange\", function HomePage_Template_ion_input_ionChange_13_listener() {\n          return ctx.showDeleteField();\n        });\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(14, \"ion-col\", 11)(15, \"ion-icon\", 12);\n        i0.ÉµÉµlistener(\"click\", function HomePage_Template_ion_icon_click_15_listener() {\n          return ctx.clearUserName();\n        });\n        i0.ÉµÉµelementEnd()()();\n        i0.ÉµÉµelement(16, \"br\");\n        i0.ÉµÉµelementStart(17, \"ion-label\", 8);\n        i0.ÉµÉµtext(18, \"CONTRASE\\u00D1A\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(19, \"ion-row\")(20, \"ion-col\", 9)(21, \"ion-input\", 13);\n        i0.ÉµÉµlistener(\"ionFocus\", function HomePage_Template_ion_input_ionFocus_21_listener() {\n          return ctx.logScroll();\n        });\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(22, \"ion-col\", 11)(23, \"ion-icon\", 12);\n        i0.ÉµÉµlistener(\"click\", function HomePage_Template_ion_icon_click_23_listener() {\n          return ctx.showUnshowPass();\n        });\n        i0.ÉµÉµelementEnd()()()();\n        i0.ÉµÉµelementStart(24, \"ion-note\", 14);\n        i0.ÉµÉµlistener(\"click\", function HomePage_Template_ion_note_click_24_listener() {\n          return ctx.recoveryPass();\n        });\n        i0.ÉµÉµtext(25, \"\\u00BFCONTRASE\\u00D1A OLVIDADA?\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(26, \"ion-note\", 15);\n        i0.ÉµÉµlistener(\"click\", function HomePage_Template_ion_note_click_26_listener() {\n          return ctx.newAccess();\n        });\n        i0.ÉµÉµtext(27, \"\\u00A1SOLICITAR ACCESO!\");\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelement(28, \"br\");\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(29, \"ion-footer\", 16)(30, \"ion-button\", 17);\n        i0.ÉµÉµlistener(\"click\", function HomePage_Template_ion_button_click_30_listener() {\n          return ctx.checkUser();\n        });\n        i0.ÉµÉµtext(31, \"ACCEDER\");\n        i0.ÉµÉµelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ÉµÉµadvance(6);\n        i0.ÉµÉµproperty(\"src\", ctx.logo);\n        i0.ÉµÉµadvance(2);\n        i0.ÉµÉµproperty(\"formGroup\", ctx.userForm);\n        i0.ÉµÉµadvance(5);\n        i0.ÉµÉµproperty(\"placeholder\", ctx.userForm.controls.user.value);\n        i0.ÉµÉµadvance(2);\n        i0.ÉµÉµproperty(\"name\", ctx.iconAux);\n        i0.ÉµÉµadvance(6);\n        i0.ÉµÉµproperty(\"type\", !ctx.showPass ? \"password\" : \"text\");\n        i0.ÉµÉµadvance(2);\n        i0.ÉµÉµproperty(\"name\", ctx.showPass == false ? \"eye-off\" : \"eye\");\n        i0.ÉµÉµadvance(7);\n        i0.ÉµÉµproperty(\"disabled\", !ctx.userForm.valid);\n      }\n    },\n    dependencies: [i7.ÉµNgNoValidate, i7.NgControlStatus, i7.NgControlStatusGroup, i4.IonButton, i4.IonButtons, i4.IonCol, i4.IonContent, i4.IonFooter, i4.IonIcon, i4.IonImg, i4.IonInput, i4.IonLabel, i4.IonNote, i4.IonRow, i4.IonToolbar, i4.TextValueAccessor, i7.FormGroupDirective, i7.FormControlName],\n    styles: [\"@media (min-width: 320px) and (max-width: 767px){.base[_ngcontent-%COMP%]{height:90%;width:100%}.logo[_ngcontent-%COMP%]{padding:3em;margin-left:2em;margin-right:2em}}@media (min-width: 768px) and (max-width: 1280px){ion-button[_ngcontent-%COMP%]{width:90%;margin-left:auto!important;margin-right:auto!important}.base[_ngcontent-%COMP%]{height:90%;margin-left:auto!important;margin-right:auto!important}.content[_ngcontent-%COMP%]{width:800px}.logo[_ngcontent-%COMP%]{padding:5em;margin-left:5em;margin-right:5em}}@media (min-width: 1281px){ion-button[_ngcontent-%COMP%]{width:90%;margin-left:auto!important;margin-right:auto!important}.base[_ngcontent-%COMP%]{height:90%;margin-left:auto!important;margin-right:auto!important}.content[_ngcontent-%COMP%]{width:800px}.logo[_ngcontent-%COMP%]{padding:5em;margin-left:5em;margin-right:5em}}ion-button[_ngcontent-%COMP%]{--background: var(--ion-color-icot) !important;--color-hover: white !important;--color-activated: var(--ion-color-icot) !important;--background-hover: var(--ion-color-icot) !important;margin-left:16px;margin-right:16px;margin-bottom:32px;max-height:50px;font-weight:900}.md[_ngcontent-%COMP%]   ion-button[_ngcontent-%COMP%]{--background: var(--ion-color-icot) !important;--color-hover: white !important;--color-activated: var(--ion-color-icot) !important;--background-hover: var(--ion-color-icot) !important;margin-left:16px;margin-right:16px;margin-bottom:32px;height:80px;font-weight:900}ion-footer[_ngcontent-%COMP%]{background-color:var(--ion-color-mywhite)}ion-icon[_ngcontent-%COMP%]{color:var(--ion-color-icot)}ion-row[_ngcontent-%COMP%]{border:3px solid var(--ion-color-icot);max-height:45px}ion-input[_ngcontent-%COMP%]{font-family:Lucida Sans,Lucida Sans Regular,Lucida Grande,Lucida Sans Unicode,Geneva,Verdana,sans-serif;font-weight:600;margin-bottom:10px;margin-top:10px;caret-color:var(--ion-color-icot);padding-left:1em;float:inline-start}ion-item.item-has-focus[_ngcontent-%COMP%] > ion-label[_ngcontent-%COMP%]{color:var(--ion-color-icot)!important}form[_ngcontent-%COMP%]{margin:0 1em 1em}#container[_ngcontent-%COMP%]{text-align:center;position:absolute;left:0;right:0;top:50%;transform:translateY(-50%)}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}#container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:16px;line-height:22px;color:#8c8c8c;margin:0}#container[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.faq[_ngcontent-%COMP%]{max-height:40px;max-width:40px;margin-left:6px}.title[_ngcontent-%COMP%]{font-weight:700;font-family:Gill Sans,Gill Sans MT,Calibri,Trebuchet MS,sans-serif;text-align:center;font-size:large;display:block;margin-top:10%}.containerForm[_ngcontent-%COMP%]{margin-bottom:2em}.containerInput[_ngcontent-%COMP%]{height:45px;padding:0}.showUnshowP[_ngcontent-%COMP%]{height:100%;padding-right:.5em;margin-top:auto!important;margin-bottom:auto!important}.noBorder[_ngcontent-%COMP%]{border:none!important;padding:0!important}.recovery[_ngcontent-%COMP%]{font-weight:bolder;font-family:monospace;text-align:center;font-size:small;display:block;font-weight:700;color:var(--ion-mycolor-black)}.newAccess[_ngcontent-%COMP%]{font-weight:italic;font-family:Gill Sans,Gill Sans MT,Calibri,Trebuchet MS,sans-serif;font-weight:900;text-align:center;display:block;font-size:medium;color:var(--ion-color-icot);margin-top:16px}.field[_ngcontent-%COMP%]{font-family:monospace;font-weight:700;font-size:small;margin-bottom:1em}.logo[_ngcontent-%COMP%]{padding:1em 3.5em 4em;animation-name:_ngcontent-%COMP%_movingWait;animation-duration:15s;animation-delay:5s;animation-iteration-count:infinite;position:relative;overflow:hidden}@keyframes _ngcontent-%COMP%_movingWait{25%{transform:translateY(5%)}50%{transform:translateY(-5%)}}ion-content[_ngcontent-%COMP%]{--background: var(--ion-color-mygradient2)}\"]\n  });\n  return HomePage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}