{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable object-shorthand */\n/* eslint-disable quote-props */\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { HttpHeaders } from '@angular/common/http';\nimport { SERVICES_OF_CENTER, SELLING_SERVICES, RANKINGS_OF_EMPLOYEES, NEW_ACCESS, ERROR_APP, ACCESS_COUNT, LOGIN_APP, USER_RECOVERY_PASS, SECRET, CHANGING_PASS, CENTER_EMPLOYEE as EMPLOYEE_INFO, CATEGORIES_LIST, CENTERS_LIST, INCENTIVES_EMPLOYEE, GET_VERSION, CHECKING_VERSION, DATA_PROMO, QUESTIONS_FAQ, LAST_CHANGES, CLASIFICATION_LEAGUE, BASE_URL, SEARCH_TRACKING, AVAILABLES_DISCOUNTS, APP_LOGS, CHECK_NOT_UPDATE, RESET_COUNT_UPDATE, LOG_TYPE, UPDATING_VERSION, UNLOCK_REQUEST } from '../app.constants';\nimport { map } from 'rxjs/operators';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./access-to.service\";\nexport let DatacheckService = /*#__PURE__*/(() => {\n  class DatacheckService {\n    constructor(http, accesing) {\n      this.http = http;\n      this.accesing = accesing;\n      this.base = BASE_URL;\n      this.login = LOGIN_APP;\n      this.newAccess = NEW_ACCESS;\n      this.changingPass = CHANGING_PASS;\n      this.recoveryPass = USER_RECOVERY_PASS;\n      this.employeeInfo = EMPLOYEE_INFO;\n      this.getAllCenters = CENTERS_LIST;\n      this.getCategories = CATEGORIES_LIST;\n      this.incentives = INCENTIVES_EMPLOYEE;\n      this.searchTracking = SEARCH_TRACKING;\n      this.servicesOfCenter = SERVICES_OF_CENTER;\n      this.sellingService = SELLING_SERVICES;\n      this.getRankings = RANKINGS_OF_EMPLOYEES;\n      this.clasificationLeague = CLASIFICATION_LEAGUE;\n      this.saveErrors = ERROR_APP;\n      this.accessCount = ACCESS_COUNT;\n      this.checkVersion = CHECKING_VERSION;\n      this.getVersion = GET_VERSION;\n      this.verifyUpdate = CHECK_NOT_UPDATE;\n      this.resetCountUp = RESET_COUNT_UPDATE;\n      this.promotions = DATA_PROMO;\n      this.faqQuestions = QUESTIONS_FAQ;\n      this.lastChanges = LAST_CHANGES;\n      this.updatingVersion = UPDATING_VERSION;\n      this.getDiscounts = AVAILABLES_DISCOUNTS;\n      this.logsApp = APP_LOGS;\n      this.unlock_request = UNLOCK_REQUEST;\n      this.options = {\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Headers': '*'\n        }\n      };\n    }\n    /**\n    * Crea la cabecera de la consulta (Reutilizable)\n    *\n    * @param tk Token de acceso de empleado\n    * @returns Cabecera generada\n    */\n    setHeader(tk) {\n      return {\n        headers: new HttpHeaders({\n          'Accept': 'application/json',\n          'Authorization': 'Bearer ' + tk\n        })\n      };\n    }\n    /**\n     * Devuelve un array con las opciones del menú\n     */\n    getMenuOpts() {\n      return this.http.get('/assets/data/sidebar-opts.json');\n    }\n    /**\n     * Comprobacion version app\n     *\n     * @param version Version actual instalada en dispositivo\n     * @returns Nueva version estable disponible o no\n     */\n    checkingVersion(version, tk) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.get(this.base + this.checkVersion + '?version=' + version, this.setHeader(tk));\n      });\n    }\n    /**\n     * Busca la version adecuada para actualizar\n     *\n     * @param platform Plataforma actual\n     * @returns Archivo a installar\n     */\n    getUpdateVersion(platform) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Por defecto el type es l (link), dato que se recoge\n        return this.http.get(this.base + this.getVersion + '?platform=' + platform + '&type=l', this.options);\n      });\n    }\n    /**\n     * Get change list update\n     *\n     * @param version Version actual\n     *\n     * @returns Lista de cambios\n     */\n    getLastChangesUpdate(version) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.base + this.lastChanges, version, this.options);\n      });\n    }\n    refreshUpdateVersion(username, version) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.base + this.updatingVersion, {\n          user: username,\n          version: version\n        }, this.options);\n      });\n    }\n    /**\n     * Gestion y comprobacion del conteo de omision de actualizacion\n     * @param username Usuario actual\n     * @param isSumCount Accion de suma\n     * @param reset Reseteo de contador\n     * @returns Respuesta consulta\n     */\n    notUpdate(username, isSumCount, reset = false) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.base + this.verifyUpdate, {\n          data: username,\n          isSum: isSumCount,\n          reset: reset\n        }, this.options);\n      });\n    }\n    /**\n     * Resetea el contador para el control de actualizacion (Intentos permitidos 3).\n     * @param Nombre_de_usuario al que se resetea el contador\n     */\n    resetUpdateCount(username) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.http.post(this.base + this.resetCountUp, {\n          user: username\n        }, this.options).subscribe();\n      });\n    }\n    /**\n     * Comprobación y control de accesos\n     *\n     * @param username Identificacion user\n     * @param mode Tipo '?' Consulta, '1' Suma de accesos\n     * @returns Count access\n     */\n    checkAccountAccess(username, mode) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.get(this.base + this.accessCount + '?username=' + username + '&type=' + mode, this.options).pipe(map(result => {\n          if (result !== null) {\n            return result.data;\n          }\n        }));\n      });\n    }\n    /**\n     * Recoge los descuentos disponibles\n     */\n    getAvailablesDiscounts(service, centre) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.get(this.base + this.getDiscounts + service + '/' + centre, this.options);\n      });\n    }\n    /**\n     * Opciones de preguntas y respuestas para el FAQ\n     *\n     * @returns Data FAQ\n     */\n    getOptionsFAQ() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.get(this.base + this.faqQuestions, this.options);\n      });\n    }\n    /**\n     * Login de usuario\n     *\n     * @param user Empleado que accede\n     */\n    checkData(user) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.base + this.login, user, this.options);\n      });\n    }\n    /**\n     * Solicitud de nuevo acceso para usuario\n     *\n     * @param info User data\n     * @returns result operation\n     */\n    newEmployeeAccess(info) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.base + this.newAccess, info, this.options);\n      });\n    }\n    /**\n    * Solicitud de desbloqueo de cuenta de usuario\n    *\n    * @param data User data\n    * @returns request response\n    */\n    unlockRequest(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.base + this.unlock_request, data, this.options).subscribe();\n      });\n    }\n    /**\n     * Realiza solicitud de restauración de contraseña\n     *\n     * @param userData\n     * @returns Result query request\n     */\n    recoveryUserPass(inputData, localData) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (localData != null) {\n          localData.username = inputData;\n          localData.secret = SECRET;\n          return this.http.post(this.base + this.recoveryPass, localData, this.options);\n        } else {\n          //NO HAY REGISTROS Y TAMPOCO INICIO DE SESIÓN PREVIA.\n          const failData = new EventEmitter(false);\n          return failData;\n        }\n      });\n    }\n    /**\n     * Actualización automática de la contraseña por parte del usuario.\n     * Se necesita un registro previo o inicio de sesión al menos una\n     * vez para conocer al usuario.\n     *\n     * @param dataPass Datos usuario\n     * @returns Consulta\n     */\n    userChangingPass(dataPass) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.base + this.changingPass, dataPass, this.options);\n      });\n    }\n    /**\n     * @returns Lista de centros\n     */\n    getCenters() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.get(this.base + this.getAllCenters);\n      });\n    }\n    /**\n     * @returns Lista de categorías disponibles\n     */\n    getJobCategory() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.get(this.base + this.getCategories);\n      });\n    }\n    /**\n     * RECOGER LOS DATOS DEL EMPLEADO\n     *\n     * @param username Empleado del centro a buscar\n     */\n    getEmployeeInfo(username, tk) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.get(this.base + this.employeeInfo + username, this.setHeader(tk));\n      });\n    }\n    /**\n     * Recoge la lista de incentivos para un mes en concreto,\n     * un año en concreto o el mes y el año solicitado.\n     *\n     * @param username Empleado a consultar incentivos\n     * @param tk Token de acceso\n     * @param m Mes a consultar (Undefined si no se requiere)\n     * @param y Año a consultar (Undefined si no se requiere)\n     * @returns JSON con la información solicitada\n     */\n    getIncentivesForEmployee(username, tk, m, y) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (m === undefined) {\n          return this.http.post(this.base + this.incentives, {\n            username: username,\n            year: y\n          }, this.setHeader(tk));\n        } else {\n          return this.http.post(this.base + this.incentives, {\n            username: username,\n            month: m,\n            year: y\n          }, this.setHeader(tk));\n        }\n      });\n    }\n    /**\n     * Recoge la informacion de un tracking pasado (repeticion)\n     *\n     * @param idTracking Tracking id\n     * @param tk Token empleado\n     * @returns Lista de datos relacionado con el tracking que se busca\n     */\n    getDataTracking(idTracking, tk) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.get(this.base + this.searchTracking + '?id=' + idTracking, this.setHeader(tk));\n      });\n    }\n    /**\n     * Recoger servicios por centro\n     *\n     * @param centerId Id centro\n     * @param tk Token empleado\n     * @returns Lista de servicios disponible para el centro\n     */\n    getServicesOf(centerId, orderDiff, tk) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.get(this.base + this.servicesOfCenter + centerId + '/' + orderDiff, this.setHeader(tk));\n      });\n    }\n    /**\n     * Venta de servicio por parte de empleado\n     *\n     * @param venta Venta a realizar\n     * @param tk Token empleado\n     * @returns Result operation\n     */\n    saleForEmployee(venta, tk) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.base + this.sellingService, venta, this.setHeader(tk));\n      });\n    }\n    /**\n     * Lista de ranking de empleados\n     *\n     * @param centreName Nombre del centro de empleado\n     * @param tk Token de empleado\n     * @returns Listado de ranking\n     */\n    getRankingsOf(centreId, tk, month, year) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (centreId !== undefined) {\n          // CONSULTA PARA MI CENTRO\n          return this.http.post(this.base + this.getRankings, {\n            centre_id: centreId,\n            month: month,\n            year: year\n          }, this.setHeader(tk));\n        } else {\n          // CONSULTA PRA GRUPO\n          return this.http.post(this.base + this.getRankings, {\n            month: month,\n            year: year\n          }, this.setHeader(tk));\n        }\n      });\n    }\n    /**\n     * Recoge la clasificacion de liga de los centros\n     *\n     * @param centreId Centro solicitado de consulta\n     * @param month Mes de consulta\n     * @param year Año de consulta\n     * @param tk Token de autenticacion\n     * @returns Liga de centros\n     */\n    getClasificationLeague(centreId, month, year, tk) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.base + this.clasificationLeague, {\n          centre: centreId,\n          month: month,\n          year: year,\n          type: 'data'\n        }, this.setHeader(tk));\n      });\n    }\n    /**\n     * Storage error in app\n     *\n     * @param error a guardar\n     * @returns Resultado operación\n     */\n    setErrors(error, extraCompo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        extraCompo.appErrorLog(LOG_TYPE[2], error.screen, error.error);\n        return this.http.post(this.base + this.saveErrors, error, this.options).subscribe(res => {\n          console.log(res);\n        });\n      });\n    }\n    /**\n     * Get info dispositivo\n     *\n     * @returns Info device\n     */\n    getUuid() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.accesing.getUuid();\n      });\n    }\n    /**\n     * Recoge las promociones actuales que se cargaran\n     * en el banner inferior de la pagina principal\n     *\n     * @returns Lista de promotions\n     */\n    getPromotionsForApp(tk) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.get(this.base + this.promotions, this.setHeader(tk));\n      });\n    }\n    /**\n     * Registra el log del\n     * resultado de las operaciones realizadas en la app\n     * @param logRequest opciones a registrar en el log: evento, fecha, pantalla, datos extra...\n     * */\n    logPost(logRequest) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.base + this.logsApp, logRequest, this.options).subscribe();\n      });\n    }\n  }\n  DatacheckService.ɵfac = function DatacheckService_Factory(t) {\n    return new (t || DatacheckService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AccessToService));\n  };\n  DatacheckService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatacheckService,\n    factory: DatacheckService.ɵfac,\n    providedIn: 'root'\n  });\n  return DatacheckService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}