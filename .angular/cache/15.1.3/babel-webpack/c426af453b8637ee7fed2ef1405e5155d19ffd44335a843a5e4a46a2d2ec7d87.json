{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { UPDATE_NOT_ALLOW, INFO_WIFI_REQUIRED_UPDATE } from '../app.constants';\nimport { CREDENTIALS_NOT_SAME, CONFIRM_USERNAME, INSERT_USERNAME, PLACEHOLDER_USERNAME, TITLE_UPDATE, INFO_UPDATE, CREDENTIALS_FORMAT_ERROR, CREDENTIALS_EMPTY } from '../app.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"./page.service\";\n/**\n * Servicio dedicado para las notificaciones y\n * alertas de usuario\n */\nexport let NotificationsService = /*#__PURE__*/(() => {\n  class NotificationsService {\n    constructor(alertCtrl, modalCrtl, loadingCtrl, popoCtrl, toastCtrl, pageSvc) {\n      this.alertCtrl = alertCtrl;\n      this.modalCrtl = modalCrtl;\n      this.loadingCtrl = loadingCtrl;\n      this.popoCtrl = popoCtrl;\n      this.toastCtrl = toastCtrl;\n      this.pageSvc = pageSvc;\n    }\n    /**\n     * Informa al usuario de nueva\n     * version estable de la app\n     */\n    updateApp(force) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.alertOp = true;\n        let buttons = [];\n        if (!force) {\n          buttons = [{\n            text: 'DESCARGAR',\n            role: 'download',\n            cssClass: 'btnAlert',\n            handler: data => {\n              return data;\n            }\n          }, {\n            text: 'DESCARGAR MÁS TARDE',\n            role: 'later',\n            cssClass: 'btnLater'\n          }];\n        } else {\n          buttons = [{\n            text: 'DESCARGAR',\n            role: 'download',\n            cssClass: 'btnAlert',\n            handler: data => {\n              return data;\n            }\n          }];\n        }\n        const updating = yield this.alertCtrl.create({\n          header: TITLE_UPDATE,\n          message: INFO_UPDATE,\n          backdropDismiss: false,\n          cssClass: 'updateStl',\n          id: 'infoUpdate',\n          mode: 'ios',\n          buttons: buttons\n        });\n        yield updating.present();\n        return yield updating.onDidDismiss();\n      });\n    }\n    updatingApp() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.loadOp = true;\n        this.loadData = true;\n        const updating = yield this.loadingCtrl.create({\n          message: '<ion-label>ACTUALIZANDO</ion-label><br><ion-img src=\"assets/imgs/updating.gif\"/>',\n          cssClass: 'updatingStl',\n          animated: true,\n          mode: 'ios',\n          translucent: true,\n          showBackdrop: true,\n          spinner: null,\n          backdropDismiss: false,\n          id: 'updateAniInfo'\n        });\n        updating.present();\n        yield updating.onDidDismiss().then(() => {\n          this.loadOp = false;\n          this.loadData = false;\n        }, ex => {\n          this.loadOp = false;\n          this.loadData = false;\n        });\n      });\n    }\n    /**\n     * Informa al usuario de nueva\n     * version estable de la app\n     */\n    notAllowUpdate() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.alertOp = true;\n        const updating = yield this.alertCtrl.create({\n          header: UPDATE_NOT_ALLOW,\n          message: INFO_WIFI_REQUIRED_UPDATE,\n          backdropDismiss: false,\n          cssClass: 'updateStl',\n          id: 'infoUpdate',\n          mode: 'ios',\n          buttons: [, {\n            text: 'OK',\n            cssClass: 'btnLater'\n          }]\n        });\n        yield updating.present();\n        return yield updating.onDidDismiss().then(() => {\n          this.alertOp = false;\n        });\n      });\n    }\n    /**\n     * Recordar contraseña\n     */\n    rememberPass(employeeData) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let data;\n        const msg = employeeData !== undefined && employeeData.username !== null ? '<br><label>' + CONFIRM_USERNAME + '</label>' : '<br><label>' + INSERT_USERNAME + '</label>';\n        const userPlaceholder = employeeData !== undefined && employeeData.username !== null ? employeeData.username : PLACEHOLDER_USERNAME;\n        this.alertOp = true;\n        const rememberPs = yield this.alertCtrl.create({\n          header: 'RECUPERACIÓN DE CONTRASEÑA',\n          message: msg,\n          mode: 'ios',\n          backdropDismiss: true,\n          cssClass: 'stlRemeberPass',\n          inputs: [{\n            name: 'username',\n            type: 'text',\n            cssClass: 'alertStl',\n            placeholder: userPlaceholder\n          }],\n          buttons: [{\n            text: 'Cancelar',\n            role: 'cancel',\n            cssClass: 'btnCancel',\n            handler: () => {\n              this.closeAlert(undefined);\n            }\n          }, {\n            text: 'Aceptar',\n            cssClass: 'btnAlert',\n            handler: dt => {\n              data = dt.username;\n            }\n          }]\n        });\n        rememberPs.present();\n        yield rememberPs.onDidDismiss().then(() => {\n          this.alertOp = false;\n        });\n        return data;\n      });\n    }\n    /**\n     * Menú extra empleados (FAQ)\n     */\n    subMenuEmployee(compo, ev) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.popoOp = true;\n        const menuEmployee = yield this.popoCtrl.create({\n          component: compo,\n          mode: 'ios',\n          backdropDismiss: true,\n          event: ev,\n          translucent: true,\n          cssClass: 'popoverMenuEmployee'\n        });\n        menuEmployee.present();\n        yield menuEmployee.onDidDismiss().then(() => {\n          this.popoOp = false;\n        });\n      });\n    }\n    /**\n     * Toast informativo para mostrar más info\n     * si se realiza click en la tabla\n     */\n    showAlertMoreInfo() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const moreInfo = yield this.toastCtrl.create({\n          message: 'CLICK PARA MÁS INFO<ion-img src=\"assets/imgs/dedo.png\"/>',\n          mode: 'ios',\n          duration: 900,\n          animated: true,\n          position: 'bottom',\n          translucent: true,\n          cssClass: 'moreInfoStl'\n        });\n        moreInfo.present();\n      });\n    }\n    alertChangeList(title, subtitle, changeList) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.alertOp = true;\n        const invalid = yield this.alertCtrl.create({\n          message: '<ion-icon name=\"cog\" class=\"ic1\"></ion-icon><ion-icon name=\"cog\" class=\"ic2\"></ion-icon><h5>' + title + '</h5>' + '<ion-note class=\"subtitle\">' + subtitle + '</ion-note><br><br><ion-note>' + changeList + '</ion-note>',\n          cssClass: 'changingListStl',\n          backdropDismiss: false,\n          mode: 'ios',\n          buttons: [{\n            text: 'OK',\n            cssClass: 'btnAlert',\n            handler: () => {\n              this.closeAlert();\n            }\n          }]\n        });\n        invalid.present();\n        yield invalid.onDidDismiss().then(() => {\n          this.alertOp = false;\n        });\n      });\n    }\n    /**\n     * Notificación reuitilizable\n     *\n     * @param title Título notificación\n     * @param msg Mensaje notificación\n     * @param isBloqued variable de control cuenta bloqueada\n     */\n    alertBaseNotifications(title, msg, isLocked = false, isRequested = false, data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.alertOp = true;\n        let buttons = [];\n        if (!isLocked) {\n          buttons = [{\n            text: 'OK',\n            cssClass: 'btnAlert',\n            handler: () => {\n              this.closeAlert();\n            }\n          }];\n        } else {\n          buttons = [{\n            text: 'SOLICITAR',\n            cssClass: 'btnAlert'\n          }];\n        }\n        const baseAlert = yield this.alertCtrl.create({\n          header: title,\n          message: '<br><ion-note>' + msg + '</ion-note>',\n          cssClass: 'baseNotification',\n          backdropDismiss: false,\n          mode: 'ios',\n          buttons: buttons\n        });\n        yield baseAlert.present();\n        return yield baseAlert.onDidDismiss();\n      });\n    }\n    /**\n     * Notificacion reutilizable para\n     * alerta de preguntas\n     */\n    alertBaseQuestions(title, question, extra = null) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let userOption = false;\n        this.alertOp = true;\n        const msg = extra === null ? '<br>' + question : '<br>' + question + extra;\n        const questions = yield this.alertCtrl.create({\n          header: title,\n          message: msg,\n          mode: 'ios',\n          cssClass: 'questionsStl',\n          backdropDismiss: true,\n          buttons: [{\n            text: 'NO',\n            role: 'cancel',\n            cssClass: 'btnQuestion',\n            handler: () => {\n              this.closeAlert();\n            }\n          }, {\n            text: 'SI',\n            cssClass: 'btnQuestion',\n            handler: () => {\n              userOption = true;\n            }\n          }]\n        });\n        questions.present();\n        yield questions.onDidDismiss().then(() => {\n          this.alertOp = false;\n        });\n        return userOption;\n      });\n    }\n    /**\n     * Loader de carga\n     *\n     * @param msg Mensaje a mostrar\n     */\n    loadingData(msg) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.loadOp = true;\n        this.loadData = true;\n        const load = yield this.loadingCtrl.create({\n          message: msg,\n          mode: 'ios',\n          backdropDismiss: false,\n          spinner: 'bubbles',\n          cssClass: 'stlLoad'\n        });\n        load.present();\n        yield load.onDidDismiss().then(() => {\n          this.loadOp = false;\n          this.loadData = false;\n        }, ex => {\n          this.loadOp = false;\n          this.loadData = false;\n        });\n      });\n    }\n    /**\n     * Notificación de contenido (FAQ)\n     *\n     * @param title Título a mostrar\n     * @param question Contenido a mostrar\n     */\n    showQuestionFAQ(compo, category, title, answer, imgs) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.modalOp = true;\n        const infoFAQ = yield this.modalCrtl.create({\n          component: compo,\n          componentProps: {\n            data: {\n              title: category,\n              pregunta: title,\n              respuesta: answer,\n              images: imgs\n            }\n          },\n          backdropDismiss: true\n        });\n        infoFAQ.present();\n        infoFAQ.onDidDismiss().then(() => {\n          this.modalOp = false;\n        });\n      });\n    }\n    /**\n     * Notificación de cambio de contraseña personal\n     *\n     * @param compoAux Componente auxiliar para comprobacion\n     * @returns Información definida\n     */\n    userChangePass(compoAux) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const changePass = yield this.alertCtrl.create({\n          header: 'DEFINICIÓN DE CONTRASEÑA',\n          message: 'Por favor, establezca una contraseña personal',\n          mode: 'ios',\n          backdropDismiss: false,\n          cssClass: 'userNotifications',\n          inputs: [{\n            name: 'pass1',\n            type: 'password',\n            id: 'pass1',\n            cssClass: 'stlInput',\n            placeholder: 'Contraseña'\n          }, {\n            name: 'pass2',\n            type: 'password',\n            id: 'pass2',\n            cssClass: 'stlInput',\n            placeholder: 'Repita su contraseña aquí'\n          }],\n          buttons: [{\n            text: 'CANCELAR',\n            role: 'cancel',\n            cssClass: 'btnCancel',\n            handler: data => {\n              this.closeAlert();\n              return undefined;\n            }\n          }, {\n            text: 'ESTABLECER',\n            cssClass: 'btnAlert',\n            handler: data => {\n              if (data.pass1 !== '' && data.pass2 !== '') {\n                if (data.pass1 === data.pass2) {\n                  if (compoAux.formatPass(data.pass1)) {\n                    return data;\n                  } else {\n                    this.alertBaseNotifications(CREDENTIALS_FORMAT_ERROR.title, CREDENTIALS_FORMAT_ERROR.msg);\n                  }\n                } else {\n                  this.alertBaseNotifications(CREDENTIALS_NOT_SAME.title, CREDENTIALS_NOT_SAME.msg);\n                }\n              } else {\n                this.alertBaseNotifications(CREDENTIALS_EMPTY.title, CREDENTIALS_EMPTY.msg);\n              }\n              return false;\n            }\n          }]\n        });\n        changePass.present();\n        return (yield changePass.onDidDismiss()).data;\n      });\n    }\n    /**\n     * Alerta bloqueante dispositivo sin conexion\n     */\n    noConnectionDevice(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const noCon = yield this.alertCtrl.create({\n          // eslint-disable-next-line max-len\n          message: '<h5>' + data.title + '</h5><ion-note>' + data.subtitle + '</ion-note><br><br><ion-label>' + data.msg + '</ion-label><img src=\"' + data.ic + '\"/>',\n          mode: 'ios',\n          id: 'noCon',\n          backdropDismiss: false,\n          cssClass: 'noConStl',\n          animated: true\n        });\n        noCon.present();\n      });\n    }\n    /**\n     * Confirmación de operación\n     *\n     * @param title Titulo alerta\n     * @param msg Mensaje de alerta\n     */\n    operationConfirmation(title, msg) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const confirmation = yield this.toastCtrl.create({\n          header: title,\n          message: msg,\n          mode: 'ios',\n          cssClass: 'toastStl',\n          position: 'bottom',\n          buttons: [{\n            text: 'OK',\n            cssClass: 'bntAlert',\n            handler: () => {\n              this.toastCtrl.dismiss();\n            }\n          }]\n        });\n        yield confirmation.present();\n      });\n    }\n    /**\n     * Muestra los subtipos de servicios disponible\n     *\n     * @param compo Componente a mostrar\n     * @param services Servicios disponibles\n     */\n    showAvailablesServices(compo, services) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let extra;\n        this.popoOp = true;\n        const availables = yield this.popoCtrl.create({\n          component: compo,\n          componentProps: {\n            extra: services\n          },\n          mode: 'ios',\n          backdropDismiss: true,\n          cssClass: 'tableServices'\n        });\n        availables.present();\n        yield availables.onDidDismiss().then(data => {\n          this.popoOp = false;\n          extra = data.data;\n          return data;\n        });\n        return extra;\n      });\n    }\n    /**\n     * Notificacion de eleccion de informacion o recomendacion\n     * de servicio\n     *\n     * @param compo Componente a mostrar\n     * @param serviceName Nombre del servicio elegido\n     * @param ev Desde donde nace la notificacion\n     * @returns Eleccion usuario\n     */\n    infoOrRecommend(compo, serviceName, ev) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.popoOp = true;\n        let data;\n        const recomend = yield this.popoCtrl.create({\n          component: compo,\n          componentProps: {\n            extra: serviceName\n          },\n          backdropDismiss: true,\n          event: ev\n        });\n        recomend.present();\n        yield recomend.onDidDismiss().then(rslt => {\n          this.popoOp = false;\n          data = rslt.data;\n        });\n        return data;\n      });\n    }\n    /**\n     * Alerta de seleccion de subtipo de servicio a\n     * recomendar\n     *\n     * @param compo Componente a mostrar\n     * @param services Servicios disponibles\n     */\n    selectSubTypeService(compo, services) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.popoOp = true;\n        let selection;\n        const selectService = yield this.popoCtrl.create({\n          component: compo,\n          componentProps: {\n            collection: services\n          },\n          mode: 'ios',\n          cssClass: 'selectorService',\n          backdropDismiss: true\n        });\n        selectService.present();\n        yield selectService.onDidDismiss().then(data => {\n          this.popoOp = false;\n          selection = data.data;\n        });\n        return selection;\n      });\n    }\n    /**\n     * Informacion detallada de servicio\n     *\n     * @param data Informacion de servicio a mostrar\n     */\n    infoEmployeeService(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.alertOp = true;\n        const infoES = yield this.alertCtrl.create({\n          header: data.service.toUpperCase(),\n          message: '<br><ion-grid><ion-row><ion-col class=\"dataCol\">' + '</ion-col></ion-row><ion-row><ion-col class=\"lblCol\" size=\"2\"><ion-note>FECHA: </ion-note></ion-col><ion-col class=\"dataCol\" size=\"10\">' + data.started_date + '</ion-col></ion-row><ion-row><ion-col class=\"lblCol\" size=\"2\"><ion-note>PACIENTE:</ion-note></ion-col><ion-col class=\"dataCol\" size=\"10\">' + data.patient_name.toUpperCase() + '</ion-col></ion-row><ion-row><ion-col class=\"lblCol\" size=\"2\"><ion-note>PRECIO:</ion-note></ion-col><ion-col class=\"dataCol\" size=\"10\">' + (data.price !== undefined ? data.price + ' X ' + data.quantity + ' = ' + data.price * data.quantity + ' €' : '-') + '</ion-col></ion-row><ion-row><ion-col class=\"lblCol\" size=\"2\"><ion-note>INCENTIVOS:</ion-note></ion-col><ion-col class=\"dataCol\" size=\"10\">' + data.incentive + ' €</ion-col></ion-row><ion-row><ion-col class=\"lblCol\" size=\"2\"><ion-note>ESTADO: </ion-note></ion-col><ion-col class=\"dataCol\" size=\"10\">' + data.state.toUpperCase() + '</ion-col></ion-row><ion-row><ion-col class=\"lblCol\" size=\"2\"><ion-note>ACTUALIZACIÓN: </ion-note></ion-col><ion-col class=\"dataCol\" size=\"10\">' + data.date + '</ion-col></ion-row></ion-grid>',\n          backdropDismiss: true,\n          cssClass: 'stlEmployeeService',\n          mode: 'ios',\n          buttons: [{\n            text: 'REPETIR SERVICIO',\n            role: 'repeat',\n            cssClass: 'btnAlert'\n          }, {\n            text: 'CERRAR',\n            role: 'cancel',\n            cssClass: 'btnCancel'\n          }]\n        });\n        infoES.present();\n        yield infoES.onDidDismiss().then(d => {\n          this.alertOp = false;\n          this.extraData = d.role;\n        });\n        return this.extraData;\n      });\n    }\n    /**\n     * Toast Reutilizable\n     * @param header encabezado\n     * @param info mensaje a mostrar\n     */\n    toastBaseInfo(header, info, position) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.alertOp = true;\n        const infoToast = yield this.toastCtrl.create({\n          header: header,\n          message: '<br>' + info,\n          duration: 2000,\n          animated: true,\n          cssClass: 'toastNotifications',\n          mode: 'ios',\n          position: position\n        });\n        infoToast.present();\n        infoToast.onDidDismiss().then(() => {\n          this.alertOp = false;\n        });\n      });\n    }\n    /**\n     * Alerta solicitar acceso\n     */\n    requestAccess() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.alertOp = true;\n        const accessForEmployee = yield this.alertCtrl.create({\n          header: 'IDENTIFICACIÓN',\n          message: 'Por favor, introduzca los siguientes datos:',\n          backdropDismiss: false,\n          mode: 'ios',\n          cssClass: 'requestAccessStl',\n          inputs: [{\n            type: 'text',\n            placeholder: 'DNI',\n            id: 'dni',\n            label: 'DNI*:',\n            name: 'dni',\n            cssClass: 'stlInput'\n          }, {\n            type: \"text\",\n            placeholder: 'Nombre y Apellidos completos',\n            id: 'name',\n            name: 'name',\n            label: 'Nombre: ',\n            cssClass: 'stlInput'\n          }],\n          buttons: [{\n            text: 'CANCELAR',\n            role: 'cancel',\n            cssClass: 'btnCancel'\n          }, {\n            text: 'SOLICITAR',\n            cssClass: 'btnAlert',\n            handler: data => {\n              return data;\n            }\n          }]\n        });\n        accessForEmployee.present();\n        return yield accessForEmployee.onDidDismiss().then(data => {\n          this.alertOp = false;\n          return data;\n        });\n      });\n    }\n    /**\n     * Reseteo para solicitud de acceso\n     *\n     * @param title Título alerta\n     * @param msg Mensaje de alerta\n     * @returns User selection\n     */\n    resetRequestAccess(title, msg) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.alertOp = true;\n        const resetRequest = yield this.alertCtrl.create({\n          header: title,\n          message: '<br><strong>' + msg + '</strong><br>',\n          mode: 'ios',\n          backdropDismiss: true,\n          cssClass: 'retrySend',\n          inputs: [{\n            type: 'checkbox',\n            id: 'checkbox',\n            name: 'checkbox',\n            checked: false,\n            label: 'REENVIAR SOLICITUD',\n            cssClass: 'checkStl'\n          }],\n          buttons: [{\n            text: 'CANCELAR',\n            role: 'cancel',\n            cssClass: 'btnCancel',\n            handler: () => {\n              return undefined;\n            }\n          }, {\n            text: 'OK',\n            cssClass: 'btnAlert',\n            handler: () => {\n              return true;\n            }\n          }]\n        });\n        resetRequest.present();\n        return yield resetRequest.onDidDismiss().then(data => {\n          this.alertOp = false;\n          return data;\n        });\n      });\n    }\n    /**\n     * Aviso inicial politica de privacidad\n     *\n     * @param privacyInfo Informacion politica de privacidad\n     * @param cp Componente a mostrar\n     * @returns Accion user\n     */\n    showPrivacy(privacyInfo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let extraData;\n        const privacy = yield this.alertCtrl.create({\n          header: privacyInfo.title,\n          subHeader: privacyInfo.extra,\n          message: privacyInfo.msg,\n          mode: 'md',\n          backdropDismiss: false,\n          keyboardClose: true,\n          cssClass: 'stlPrivacy',\n          buttons: [{\n            text: 'DENEGAR',\n            cssClass: 'btnPrivacyF',\n            handler: () => {\n              extraData = false;\n            }\n          }, {\n            text: 'ACEPTAR',\n            cssClass: 'btnPrivacyT',\n            handler: () => {\n              extraData = true;\n            }\n          }]\n        });\n        privacy.present();\n        yield privacy.onDidDismiss();\n        return extraData;\n      });\n    }\n    baseThrowAlerts(title, mensaje) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const throwEjec = yield this.alertCtrl.create({\n          message: '<ion-icon name=\"alert-circle\"></ion-icon><br><h6>' + title + '</h6>' + '<br>' + mensaje,\n          backdropDismiss: false,\n          mode: 'ios',\n          id: 'notiError',\n          cssClass: 'throwBaseStl',\n          buttons: [{\n            text: 'OK',\n            role: 'cancel',\n            cssClass: 'btnAlert',\n            handler: () => {\n              this.alertCtrl.dismiss();\n            }\n          }]\n        });\n        throwEjec.present();\n        yield throwEjec.onDidDismiss();\n      });\n    }\n    /**\n     * Alerta para elegir destinatario de correo\n     *\n     * @param mails Coleccion de mails disponible para\n     * enviar\n     * @returns Correo a enviar el mail\n     */\n    selectMailSend(mails) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.alertOp = true;\n        let dataAux;\n        const sendingMail = yield this.alertCtrl.create({\n          header: 'SELECCIONAR DESTINATARIO',\n          message: 'Elegir una opción',\n          mode: 'ios',\n          cssClass: 'multiMailStl',\n          backdropDismiss: false,\n          inputs: [{\n            type: 'radio',\n            cssClass: 'inputStl',\n            value: mails[0],\n            name: 'mail1',\n            label: mails[0],\n            handler: () => {\n              dataAux = mails[0];\n              this.alertCtrl.dismiss();\n            }\n          }, {\n            type: 'radio',\n            cssClass: 'inputStl',\n            value: mails[1],\n            name: 'mail2',\n            label: mails[1],\n            handler: () => {\n              dataAux = mails[1];\n              this.alertCtrl.dismiss();\n            }\n          }]\n        });\n        yield sendingMail.present();\n        return yield sendingMail.onDidDismiss().then(() => {\n          this.alertOp = false;\n          return dataAux;\n        });\n        return dataAux;\n      });\n    }\n    /**\n     * Salir de la app\n     *\n     * @returns Eleccion del usuario\n     */\n    exitApp() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let dataResult;\n        if (!this.alertOp && !this.modalOp && !this.popoOp && !this.loadOp && !this.pageSvc.modalOp) {\n          this.exitPresent = true;\n          const exit = yield this.alertCtrl.create({\n            header: '¿SALIR?',\n            message: '<br><ion-note>¿DESEA SALIR DE LA APLICACIÓN?</ion-note>',\n            mode: 'ios',\n            cssClass: 'exitAppStl',\n            id: 'exitAlert',\n            backdropDismiss: true,\n            buttons: [{\n              text: 'NO',\n              role: 'cancel',\n              cssClass: 'alertBtn',\n              handler: () => {\n                this.closeAlert();\n              }\n            }, {\n              text: 'SI',\n              cssClass: 'alertBtn',\n              handler: () => {\n                dataResult = true;\n              }\n            }]\n          });\n          exit.present();\n          yield exit.onDidDismiss().then(() => {\n            this.exitPresent = false;\n          });\n        }\n        return dataResult;\n      });\n    }\n    infoNotifications() {\n      return !this.alertOp && !this.modalOp && !this.popoOp && !this.loadOp && !this.pageSvc.modalOp;\n    }\n    /** CIERRES NOTIFICATIONS, MODALS Y OTHERS**/\n    generallyClose() {\n      this.closeAlert();\n      this.closeModal();\n      this.closePopover();\n      this.cancelLoad();\n    }\n    closeModal(extra) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const modaling = yield this.modalCrtl.getTop();\n        if (extra !== undefined) {\n          yield this.modalCrtl.dismiss(extra);\n        } else {\n          if (modaling !== undefined) {\n            yield this.modalCrtl.dismiss();\n          }\n        }\n      });\n    }\n    closeAlert(extra) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alerting = yield this.alertCtrl.getTop();\n        if (alerting !== undefined) {\n          yield this.alertCtrl.dismiss();\n        }\n      });\n    }\n    cancelLoad() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const loader = yield this.loadingCtrl.getTop();\n        if (loader !== undefined) {\n          yield this.loadingCtrl.dismiss();\n        }\n      });\n    }\n    closePopover(extra) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const notification = yield this.popoCtrl.getTop();\n        if (notification !== undefined) {\n          yield this.popoCtrl.dismiss(extra);\n        }\n      });\n    }\n    contentFileEnvironment() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const environmentData = yield this.alertCtrl.create({\n          header: 'ENVIRONMENT DATA',\n          message: 'Introduzca la url a definir en el archivo environment',\n          mode: 'ios',\n          backdropDismiss: false,\n          cssClass: 'stlEnvironment',\n          inputs: [{\n            type: 'url',\n            placeholder: 'URL aquí',\n            id: 'urlEnvironment',\n            cssClass: 'environmentStl'\n          }],\n          buttons: [{\n            text: 'CANCELAR',\n            role: 'cancel',\n            cssClass: 'btnCancel'\n          }, {\n            text: 'OK',\n            role: 'accept',\n            cssClass: 'btnAlert',\n            handler: data => {\n              this.closeAlert(data);\n            }\n          }, {\n            text: 'BORRAR ARCHIVO',\n            role: 'delete',\n            cssClass: 'btnDelete'\n          }]\n        });\n        yield environmentData.present();\n        return yield environmentData.onDidDismiss().catch(() => {\n          return undefined;\n        });\n      });\n    }\n  }\n  NotificationsService.ɵfac = function NotificationsService_Factory(t) {\n    return new (t || NotificationsService)(i0.ɵɵinject(i1.AlertController), i0.ɵɵinject(i1.ModalController), i0.ɵɵinject(i1.LoadingController), i0.ɵɵinject(i1.PopoverController), i0.ɵɵinject(i1.ToastController), i0.ɵɵinject(i2.PageService));\n  };\n  NotificationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationsService,\n    factory: NotificationsService.ɵfac,\n    providedIn: 'root'\n  });\n  return NotificationsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}