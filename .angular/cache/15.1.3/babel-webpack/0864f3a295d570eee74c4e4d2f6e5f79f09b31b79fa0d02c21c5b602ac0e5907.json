{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\n/**\n * Servicio para gestión de páginas y componentes\n * a mostrar\n */\nexport let PageService = /*#__PURE__*/(() => {\n  class PageService {\n    constructor(modalCrtl) {\n      this.modalCrtl = modalCrtl;\n    }\n    /**\n     * Apertura Modal de FAQ\n     *\n     * @param compo Componente a mostrar\n     * @param isEnable Menú extra empleados\n     */\n    openFAQ(compo, isEnable) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.modalOp = true;\n        const faq = yield this.modalCrtl.create({\n          component: compo,\n          componentProps: {\n            menu: isEnable\n          },\n          backdropDismiss: true,\n          mode: 'ios',\n          cssClass: 'stlFAQ'\n        });\n        faq.present();\n        yield faq.onDidDismiss().then(() => __awaiter(this, void 0, void 0, function* () {\n          this.modalOp = false;\n        }));\n      });\n    }\n    /**\n     * Muestra la pantalla de los datos\n     * del centro del empleado\n     *\n     * @param compo Componente a mostrar\n     */\n    userMyData(compo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.modalOp = true;\n        const myData = this.modalCrtl.create({\n          component: compo,\n          backdropDismiss: true,\n          mode: 'ios'\n        });\n        (yield myData).present();\n        yield (yield myData).onDidDismiss().then(() => {\n          this.modalOp = false;\n        });\n      });\n    }\n    /**\n     * Muestra la pantalla de lista de servicios\n     *\n     * @param compo Componente a mostrar\n     */\n    listOfServices(compo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.modalOp = true;\n        const services = yield this.modalCrtl.create({\n          component: compo,\n          id: 'servicesList',\n          mode: 'ios',\n          backdropDismiss: true\n        });\n        services.present();\n        services.onDidDismiss().then(() => {\n          this.modalOp = false;\n        });\n      });\n    }\n    /**\n     * Muestra la pantalla de los incentivos\n     *\n     * @param compo Componente a mostrar\n     */\n    employeeIncentives(compo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.modalOp = true;\n        const incentives = yield this.modalCrtl.create({\n          component: compo,\n          mode: 'ios',\n          backdropDismiss: true\n        });\n        incentives.present();\n        yield incentives.onDidDismiss().then(() => {\n          this.modalOp = false;\n        });\n      });\n    }\n    /**\n     * Show screen rankings\n     *\n     * @param compo Componente a mostrar\n     */\n    getRankings(compo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.modalOp = true;\n        const rankings = yield this.modalCrtl.create({\n          component: compo,\n          mode: 'ios',\n          backdropDismiss: true\n        });\n        rankings.present();\n        yield rankings.onDidDismiss().then(() => {\n          this.modalOp = false;\n        });\n      });\n    }\n    /**\n     * Show Centres League\n     *\n     * @param compo Componente a mostrar\n     */\n    getClasificationLeague(compo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.modalOp = true;\n        const league = yield this.modalCrtl.create({\n          component: compo,\n          // componentProps: {\n          //   img: categoryImg,\n          //   extra: extras,\n          //   center: centro\n          // },\n          mode: 'ios',\n          backdropDismiss: true,\n          id: 'leagueCentres'\n        });\n        league.present();\n        yield league.onDidDismiss().then(() => {\n          this.modalOp = false;\n        });\n      });\n    }\n    /**\n     * Recomendar servicios desde el listado\n     *\n     * @param compo Componente a mostrar\n     * @param categoryImg Imagen categoria\n     * @param extras Servicio a configurar\n     * @param centro Centro realizador elegido\n     */\n    recomendedService(compo, categoryImg, centro, extras = undefined, isRepeat = false) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.modalOp = true;\n        const newSale = yield this.modalCrtl.create({\n          component: compo,\n          componentProps: {\n            img: categoryImg,\n            extra: extras,\n            center: centro,\n            repeat: isRepeat\n          },\n          mode: 'ios',\n          backdropDismiss: true,\n          id: 'forSale'\n        });\n        newSale.present();\n        yield newSale.onDidDismiss().then(() => {\n          this.modalOp = false;\n        });\n      });\n    }\n    viewContentModal(compo, extras) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const confirmation = yield this.modalCrtl.create({\n          component: compo,\n          componentProps: {\n            data: extras\n          },\n          backdropDismiss: true,\n          cssClass: 'confirmationStl',\n          mode: 'ios'\n        });\n        confirmation.present();\n        return yield (yield confirmation.onDidDismiss()).data;\n      });\n    }\n    // Cierre de componente\n    closeModal(extra) {\n      this.modalOp = false;\n      if (extra !== undefined) {\n        this.modalCrtl.dismiss(extra);\n      }\n      this.modalCrtl.dismiss();\n    }\n  }\n  PageService.ɵfac = function PageService_Factory(t) {\n    return new (t || PageService)(i0.ɵɵinject(i1.ModalController));\n  };\n  PageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PageService,\n    factory: PageService.ɵfac,\n    providedIn: 'root'\n  });\n  return PageService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}