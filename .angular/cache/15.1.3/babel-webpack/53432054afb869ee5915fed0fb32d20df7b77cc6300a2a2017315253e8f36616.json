{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./employee.service\";\nimport * as i2 from \"./datacheck.service\";\nexport let CentersUtilsService = /*#__PURE__*/(() => {\n  class CentersUtilsService {\n    constructor(storage, checkSvc) {\n      this.storage = storage;\n      this.checkSvc = checkSvc;\n      /**\n       * Centros disponibles\n       */\n      this.centers = undefined;\n    }\n    /***\n     * Comprobacion centros en local\n     */\n    localCenters() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.centers === undefined) {\n          this.storage.employeeBd.get('centers').then(res => __awaiter(this, void 0, void 0, function* () {\n            if (res == null) {\n              console.log(res);\n              yield this.getCenterOfSystem();\n            } else {\n              console.log(res);\n              this.centers = res;\n              return true;\n            }\n          })).catch(ex => false);\n        }\n      });\n    }\n    /**\n     * Recogida centros sistema\n     */\n    getCenterOfSystem() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.checkSvc.getCenters().then(res => {\n          this.centersSubcription = res.subscribe(listCenters => {\n            if (listCenters !== undefined) {\n              this.centers = listCenters.data;\n              this.storage.employeeBd.set('centers', this.centers);\n              return true;\n            }\n          });\n        }).catch(ex => false);\n      });\n    }\n    /**\n     * Método auxiliar\n     *\n     * @returns objeto base de tipo CENTRE\n     */\n    centerDefault() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return {\n          id: -1,\n          centre: '',\n          centre_address: ' ',\n          centre_email: '',\n          centre_phone: 0,\n          timetable: '',\n          island: '',\n          supervisor: ''\n        };\n      });\n    }\n  }\n  CentersUtilsService.ɵfac = function CentersUtilsService_Factory(t) {\n    return new (t || CentersUtilsService)(i0.ɵɵinject(i1.EmployeeService), i0.ɵɵinject(i2.DatacheckService));\n  };\n  CentersUtilsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CentersUtilsService,\n    factory: CentersUtilsService.ɵfac,\n    providedIn: 'root'\n  });\n  return CentersUtilsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}