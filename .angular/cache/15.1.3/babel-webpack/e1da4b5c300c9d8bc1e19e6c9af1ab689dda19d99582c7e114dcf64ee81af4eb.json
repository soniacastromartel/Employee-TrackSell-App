{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic-native/device/ngx\";\nimport * as i2 from \"./employee.service\";\nexport let AccessToService = /*#__PURE__*/(() => {\n  class AccessToService {\n    constructor(device, employeeSvc) {\n      this.device = device;\n      this.employeeSvc = employeeSvc;\n      /**\n       * Informacion de dispositivo\n       */\n      this.deviceInfo = {\n        modelo: undefined,\n        uuid: undefined,\n        version: undefined,\n        fabricante: undefined,\n        os: undefined\n      };\n    }\n    /**\n     * Get info Device\n     *\n     * @returns info device\n     */\n    getUuid() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.deviceInfo.modelo = this.device.model;\n        this.deviceInfo.uuid = this.device.uuid;\n        this.deviceInfo.version = this.device.version;\n        this.deviceInfo.fabricante = this.device.manufacturer;\n        this.deviceInfo.os = this.device.platform;\n        return this.deviceInfo;\n      });\n    }\n    /**\n     * Se encarga de reestablecer los campos base\n     * para el bloqueo del usuario\n     */\n    userBlock() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.employeeSvc.actualToken = undefined;\n        this.employeeSvc.employee = undefined;\n        this.employeeSvc.center = undefined;\n        this.employeeSvc.isValid = false;\n      });\n    }\n  }\n  AccessToService.ɵfac = function AccessToService_Factory(t) {\n    return new (t || AccessToService)(i0.ɵɵinject(i1.Device), i0.ɵɵinject(i2.EmployeeService));\n  };\n  AccessToService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccessToService,\n    factory: AccessToService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccessToService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}