{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { LOADING_CENTERS, LOADING_DATA, SCROLLING_TIME, DAY_MONTH_YEAR_FORMAT, DNI, PHONE, HC, EXTRA_DATA, IMG_WORD, LOADING_CONTENT, VENTA_CONFIRMADA, NO_VALIDATION_FORM, ERROR_TRACKING_DATE, FECHA_INVALID, CENTER_REQUIRED, CENTER_REQUIRED_RESPONSE, ERROR_CORTE_INCENTIVES, RESET_FORM_SALE, SALE_ERROR, ERROR, CENTRE, MIN_SERVICE_COUNT, MAX_TIME_LOADING, FORMAT_DATE_SPANISH, NOT_DISCOUNT, FORMAT_DATE_SPANISH_SHORT, REPEAT_SERVICE, ERROR_RECONFIGURE_SALE } from '../../app.constants';\nimport * as moment from 'moment';\nimport { TextTransformPipe } from '../../pipes/text-transform.pipe';\nimport { SaleConfirmationComponent } from '../sale-confirmation/sale-confirmation.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/notifications.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../../services/utils.service\";\nimport * as i4 from \"../../services/centers-utils.service\";\nimport * as i5 from \"../../services/employee.service\";\nimport * as i6 from \"../../services/datacheck.service\";\nimport * as i7 from \"../../pipes/text-transform.pipe\";\nimport * as i8 from \"../../services/page.service\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/forms\";\nimport * as i11 from \"../header/header.component\";\nconst _c0 = [\"content\"];\nconst _c1 = [\"selectSV\"];\nconst _c2 = [\"selectCR\"];\nconst _c3 = [\"selectCD\"];\nfunction NewSaleComponent_ion_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-icon\", 29);\n    i0.ɵɵlistener(\"click\", function NewSaleComponent_ion_icon_2_Template_ion_icon_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.clearForm());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NewSaleComponent_div_21_ion_select_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 35);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const center_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", center_r15);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(center_r15 == null ? null : center_r15.name);\n  }\n}\nfunction NewSaleComponent_div_21_ion_select_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const service_r16 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", service_r16);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 2, service_r16 == null ? null : service_r16.name));\n  }\n}\nfunction NewSaleComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 6)(2, \"ion-label\", 30);\n    i0.ɵɵtext(3, \"CENTRO REALIZADOR*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ion-select\", 31);\n    i0.ɵɵlistener(\"ionChange\", function NewSaleComponent_div_21_Template_ion_select_ionChange_4_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.servicesOfCenter());\n    });\n    i0.ɵɵtemplate(5, NewSaleComponent_div_21_ion_select_option_5_Template, 2, 2, \"ion-select-option\", 32);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 6)(7, \"ion-label\");\n    i0.ɵɵtext(8, \"SERVICIO*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"ion-select\", 33);\n    i0.ɵɵlistener(\"ionChange\", function NewSaleComponent_div_21_Template_ion_select_ionChange_9_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.getDiscountsServices());\n    });\n    i0.ɵɵtemplate(10, NewSaleComponent_div_21_ion_select_option_10_Template, 3, 4, \"ion-select-option\", 34);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.centers);\n    i0.ɵɵadvance(4);\n    i0.ɵɵattribute(\"disabled\", ctx_r2.venta.controls.cRealizador.value == undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.servicesAvailables);\n  }\n}\nfunction NewSaleComponent_div_22_ion_select_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"uppercase\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const service_r24 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", service_r24);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 2, service_r24 == null ? null : service_r24.name));\n  }\n}\nfunction NewSaleComponent_div_22_ion_select_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 35);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const center_r25 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", center_r25);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(center_r25 == null ? null : center_r25.name);\n  }\n}\nfunction NewSaleComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 6)(2, \"ion-label\");\n    i0.ɵɵtext(3, \"SERVICIO*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ion-select\", 33, 37);\n    i0.ɵɵlistener(\"ionChange\", function NewSaleComponent_div_22_Template_ion_select_ionChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.updateFields(1, $event));\n    });\n    i0.ɵɵtemplate(6, NewSaleComponent_div_22_ion_select_option_6_Template, 3, 4, \"ion-select-option\", 34);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 6)(8, \"ion-label\", 30);\n    i0.ɵɵtext(9, \"CENTRO REALIZADOR*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"ion-select\", 31, 38);\n    i0.ɵɵlistener(\"ionChange\", function NewSaleComponent_div_22_Template_ion_select_ionChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r28.updateFields(2, $event));\n    });\n    i0.ɵɵtemplate(12, NewSaleComponent_div_22_ion_select_option_12_Template, 2, 2, \"ion-select-option\", 32);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.servicesAvailables);\n    i0.ɵɵadvance(4);\n    i0.ɵɵattribute(\"disabled\", ctx_r3.venta.controls.service.value == undefined);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.centers);\n  }\n}\nfunction NewSaleComponent_ion_select_option_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 39);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const center_r29 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", center_r29);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(center_r29.name !== undefined ? center_r29.name : center_r29.centre);\n  }\n}\nfunction NewSaleComponent_div_31_ion_col_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-col\", 7)(1, \"ion-note\", 42);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ion-row\")(4, \"ion-col\");\n    i0.ɵɵelement(5, \"ion-radio\", 36);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const id_r31 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(id_r31.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", id_r31.value);\n  }\n}\nfunction NewSaleComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"ion-label\");\n    i0.ɵɵtext(2, \"IDENTIFICACI\\u00D3N DE PACIENTE*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ion-radio-group\", 40)(4, \"ion-row\");\n    i0.ɵɵtemplate(5, NewSaleComponent_div_31_ion_col_5_Template, 6, 2, \"ion-col\", 41);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r6.identificationOptions);\n  }\n}\nfunction NewSaleComponent_ng_template_32_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r33 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-label\", 43);\n    i0.ɵɵlistener(\"click\", function NewSaleComponent_ng_template_32_Template_ion_label_click_0_listener() {\n      i0.ɵɵrestoreView(_r33);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r32.changeIdentification());\n    });\n    i0.ɵɵtext(1, \"CAMBIAR\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"ion-label\", 44);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ion-input\", 45);\n    i0.ɵɵlistener(\"ionBlur\", function NewSaleComponent_ng_template_32_Template_ion_input_ionBlur_4_listener() {\n      i0.ɵɵrestoreView(_r33);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r34.completeFields());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r8.textTransform.transform(ctx_r8.venta.controls.idType.value), \"*\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"minlength\", ctx_r8.venta.controls.idType.value !== \"hc\" ? 9 : 6)(\"type\", ctx_r8.venta.controls.idType.value !== \"dni\" ? \"number\" : \"text\");\n  }\n}\nfunction NewSaleComponent_div_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"ion-label\", 46);\n    i0.ɵɵtext(2, \"OBSERVACIONES\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"ion-textarea\", 47);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NewSaleComponent_ion_select_option_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 39);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const discount_r35 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", discount_r35);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(discount_r35.name);\n  }\n}\nexport let NewSaleComponent = /*#__PURE__*/(() => {\n  class NewSaleComponent {\n    constructor(notification, params, utils, centersUtils, employeeSvc, checkSvc, textTransform, pageSvc) {\n      this.notification = notification;\n      this.params = params;\n      this.utils = utils;\n      this.centersUtils = centersUtils;\n      this.employeeSvc = employeeSvc;\n      this.checkSvc = checkSvc;\n      this.textTransform = textTransform;\n      this.pageSvc = pageSvc;\n      // Types identification patient\n      this.identificationOptions = [{\n        title: 'DNI',\n        value: DNI\n      }, {\n        title: 'TELÉFONO',\n        value: PHONE\n      }, {\n        title: 'H.C.',\n        value: HC\n      }];\n      // Descuentos disponibles\n      this.discountAvailables = [];\n      // Servicios disponibles\n      this.servicesAvailables = [];\n      //Centros disponibles\n      this.centers = [];\n      this.employeeCenters = [];\n      // Enlace de venta\n      this.venta = new FormGroup({\n        cRealizador: new FormControl(undefined, [Validators.required]),\n        service: new FormControl(undefined, Validators.required),\n        cEmployee: new FormControl(undefined, Validators.required),\n        fechaVenta: new FormControl({\n          value: '',\n          disabled: true\n        }),\n        quantity: new FormControl(undefined, [Validators.min(MIN_SERVICE_COUNT), Validators.required]),\n        idType: new FormControl(undefined, Validators.required),\n        patientId: new FormControl(undefined, [Validators.minLength(6), Validators.required]),\n        patientName: new FormControl(undefined, [Validators.minLength(9), Validators.required]),\n        observaciones: new FormControl(''),\n        discount: new FormControl(NOT_DISCOUNT)\n      }, {\n        updateOn: 'change'\n      });\n      // Obj venta final\n      this.builderSale = {};\n      // Extra control form\n      this.active = false;\n      this.activeDay = new Date();\n    }\n    /**\n     * Comprobacion/recogida de datos iniciales\n     */\n    ionViewWillEnter() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.utils.controlToNotifications(MAX_TIME_LOADING);\n        // Opciones de configurador (Repetido?, preconfigurado?, ..)\n        const centerRealizador = this.params.get(CENTRE);\n        this.serviceSale = this.params.get(EXTRA_DATA);\n        this.categoryImgCard = this.params.get(IMG_WORD);\n        const isRepeat = this.params.get(REPEAT_SERVICE);\n        // Carga de centros (Realizador)\n        if (centerRealizador === undefined) {\n          if (this.centersUtils.centers === undefined) {\n            this.notification.loadingData(LOADING_CENTERS);\n            yield this.centersUtils.getCenterOfSystem().then(() => {\n              this.centers = this.centersUtils.centers;\n              this.notification.cancelLoad();\n              this.utils.cancelControlNotifications();\n            });\n          } else {\n            this.centers = this.centersUtils.centers;\n          }\n        } else {\n          let cRealizador;\n          this.centersUtils.centers.forEach(reg => {\n            if (reg.name === centerRealizador) {\n              cRealizador = reg;\n            }\n          });\n          this.centers.push(cRealizador);\n          this.venta.controls.cRealizador.setValue(cRealizador);\n        }\n        moment.locale('es');\n        this.venta.controls.fechaVenta.setValue(moment().format(FORMAT_DATE_SPANISH));\n        this.venta.controls.quantity.setValue(MIN_SERVICE_COUNT);\n        // Centro empleado\n        if (this.employeeSvc.employee.centreAux !== undefined) {\n          this.employeeSvc.employee.centreAux.forEach(c => {\n            this.employeeCenters.push({\n              id: c.centre_id,\n              name: c.centre\n            });\n          });\n        } else {\n          this.employeeCenters = this.centersUtils.centers.filter(reg => reg.id === this.employeeSvc.employee.centre_id);\n          this.venta.controls.cEmployee.setValue(this.employeeCenters[0]);\n        }\n        if (!isRepeat) {\n          if (this.serviceSale !== undefined) {\n            this.servicesAvailables.push(this.serviceSale);\n            this.venta.controls.service.setValue(this.serviceSale);\n          }\n        } else {\n          yield this.loadServiceToSale(this.serviceSale);\n        }\n        this.notification.cancelLoad();\n        this.utils.cancelControlNotifications();\n      });\n    }\n    /**\n     * Recoge los servicios para el centro realizador\n     * seleccionado por el usuario\n     */\n    servicesOfCenter() {\n      if (this.venta.controls.cRealizador.value !== null) {\n        if (!this.notification.loadData) {\n          this.utils.controlToNotifications(MAX_TIME_LOADING);\n          this.notification.loadingData(LOADING_DATA);\n        }\n        this.servicesAvailables = [];\n        const cRealizador = this.venta.controls.cRealizador.value;\n        if (cRealizador !== undefined) {\n          // Recogida de servicios segun centro\n          this.checkSvc.getServicesOf(cRealizador.id, true, this.employeeSvc.actualToken).then(result => {\n            this.serviceSubcription = result.subscribe(collection => {\n              const services = collection.data;\n              this.categoryImgCardList = [];\n              services.forEach(s => {\n                this.servicesAvailables.push(s);\n              });\n              this.notification.cancelLoad();\n              this.utils.cancelControlNotifications();\n              this.serviceSubcription.unsubscribe();\n            });\n          });\n        }\n      }\n    }\n    /**\n     * Se encarga de filtrar y definir la imagen de la categoria\n     * segun el servicio seleccionado\n     */\n    selectingCategoryImg() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.categoryImgCard === undefined && this.venta.controls.service.value !== undefined) {\n          const serv = this.venta.controls.service.value;\n          if (this.categoryImgCardList !== undefined) {\n            this.categoryImgCardList.filter(reg => {\n              if (serv.name.includes(reg.name.substr(0, 6))) {\n                this.categoryImgCard = reg.url;\n              }\n            });\n          }\n        }\n      });\n    }\n    /**\n     * Comprobacion de venta\n     */\n    checkService(ev) {\n      const check1 = this.venta.controls.cRealizador.value != undefined;\n      const check2 = this.venta.controls.service.value != undefined;\n      const check3 = this.venta.controls.cEmployee.value != undefined;\n      this.showUnshowDataPatient(check1 && check2 && check3);\n      this.selectCD.selectedText = ev.target.value.name;\n    }\n    /**\n     * Completa la identificacion cuando se elige [HC], completando\n     * el contenido a 6 digitos si no se han completado.\n     */\n    completeFields() {\n      if (this.venta.controls.patientId.value !== undefined && this.venta.controls.idType.value === HC && this.venta.controls.patientId.value.length < 6) {\n        const len = this.venta.controls.patientId.value.length;\n        const fillZero = 6 - len;\n        let aux = '';\n        for (let x = 0; x < fillZero; x++) {\n          aux += '0';\n        }\n        aux = aux + this.venta.controls.patientId.value;\n        this.venta.controls.patientId.setValue(aux);\n      }\n    }\n    /**\n     * Cambio de tipo de identificacion\n     * para los pacientes\n     */\n    changeIdentification() {\n      this.venta.controls.idType.setValue(undefined);\n      this.venta.controls.patientId.setValue(undefined);\n    }\n    /**\n     * Creacion del registro de venta (recomendacion)\n     */\n    sendSale() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.selectingCategoryImg();\n        // Obj temporal de venta\n        this.builderSale = {\n          employee: this.employeeSvc.employee.username,\n          cRealizador: this.venta.controls.cRealizador.value,\n          service: this.venta.controls.service.value,\n          cEmployee: this.venta.controls.cEmployee.value,\n          cantidad: this.venta.controls.quantity.value,\n          portada: this.categoryImgCard,\n          pacienteId: this.venta.controls.patientId.value,\n          pacienteName: this.venta.controls.patientName.value,\n          fecha: moment().format(FORMAT_DATE_SPANISH_SHORT),\n          observaciones: this.venta.controls.observaciones.value,\n          discount: this.venta.controls.discount.value\n        };\n        yield this.pageSvc.viewContentModal(SaleConfirmationComponent, this.builderSale).then(res => __awaiter(this, void 0, void 0, function* () {\n          if (res) {\n            this.builderSale = this.buildingSale();\n            this.utils.controlToNotifications(MAX_TIME_LOADING);\n            this.notification.loadingData(LOADING_CONTENT);\n            // Registro de venta de empleado\n            yield this.checkSvc.saleForEmployee(this.builderSale, this.employeeSvc.actualToken).then(result => {\n              this.saleSubcription = result.subscribe(() => {\n                this.notification.cancelLoad();\n                this.utils.cancelControlNotifications();\n                this.notification.alertBaseNotifications(VENTA_CONFIRMADA.title, VENTA_CONFIRMADA.msg);\n                this.goBack();\n              }, ex => {\n                this.notification.cancelLoad();\n                this.utils.cancelControlNotifications();\n                if (ex.error.message === NO_VALIDATION_FORM && ex.error.data !== undefined && ex.error.data.tracking_date !== undefined && ex.error.data.tracking_date[0] === ERROR_TRACKING_DATE || ex.error.message == ERROR_CORTE_INCENTIVES) {\n                  this.notification.baseThrowAlerts(FECHA_INVALID.title, FECHA_INVALID.msg);\n                } else if (ex.error.message === NO_VALIDATION_FORM && ex.error.data.centre_employee_id[0] === CENTER_REQUIRED_RESPONSE) {\n                  this.notification.baseThrowAlerts(CENTER_REQUIRED.title, CENTER_REQUIRED.msg);\n                } else {\n                  this.notification.baseThrowAlerts(ERROR.title, ERROR.msg);\n                }\n              });\n            }).catch(ex => {\n              this.notification.baseThrowAlerts(SALE_ERROR.title, SALE_ERROR.msg);\n            });\n          }\n        }));\n      });\n    }\n    /**\n     * Actualizacion tras carga automatica\n     *\n     * @param idx Posicion\n     * @param ev Evento a gestionar\n     */\n    updateFields(idx, ev) {\n      switch (idx) {\n        case 1:\n          this.selectSV.selectedText = ev.target.value.name;\n          break;\n        case 2:\n          this.selectCR.selectedText = ev.target.value.name;\n          break;\n      }\n    }\n    /**\n     * Recoger los descuentos disponibles para el servicio y el\n     * centro seleccionado\n     */\n    getDiscountsServices() {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, function* () {\n        this.discountAvailables = [];\n        if (this.venta.controls.cRealizador.value !== -1 && this.venta.controls.service.value !== -1) {\n          const centreId = (_a = this.venta.controls.cRealizador.value) === null || _a === void 0 ? void 0 : _a.id;\n          const serviceId = (_b = this.venta.controls.service.value) === null || _b === void 0 ? void 0 : _b.id;\n          if (centreId !== undefined && centreId !== -1 && serviceId !== undefined && serviceId !== -1) {\n            // Se recogen los descuentos disponibles\n            this.checkSvc.getAvailablesDiscounts(serviceId, centreId).then(discounts => {\n              this.discountSubcription = discounts.subscribe(res => {\n                this.discountAvailables.push({\n                  name: 'NO SE APLICA',\n                  type: 'none'\n                });\n                const availablesDiscounts = new Array(res.slice(0, res.byteLength));\n                for (let i = 0; i < 4; i++) {\n                  if (availablesDiscounts[0][i] !== undefined) {\n                    this.discountAvailables.push(availablesDiscounts[0][i]);\n                  }\n                }\n                this.discountSubcription.unsubscribe();\n              });\n            });\n          } else {\n            this.discountAvailables = [];\n          }\n        }\n      });\n    }\n    /* CLOSE SECTION */\n    goBack() {\n      this.notification.closeModal();\n    }\n    /**\n     * Vacía el formulario\n     */\n    clearForm() {\n      this.notification.alertBaseQuestions(RESET_FORM_SALE.title, RESET_FORM_SALE.msg).then(res => {\n        if (res) {\n          this.venta.reset();\n          this.venta.controls.fechaVenta.setValue(moment().format(FORMAT_DATE_SPANISH));\n          this.venta.controls.quantity.setValue(MIN_SERVICE_COUNT);\n          this.content.scrollToTop(SCROLLING_TIME);\n        }\n      });\n    }\n    /**\n     * Recoge el tracking anterior y extrae los datos necesarios para la recreacion\n     */\n    loadServiceToSale(dataService) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.utils.controlToNotifications(MAX_TIME_LOADING);\n        this.notification.loadingData(LOADING_CONTENT);\n        this.checkSvc.getDataTracking(this.serviceSale.tracking_id, this.employeeSvc.actualToken).then(r => {\n          this.serviceSubcription = r.subscribe(data => {\n            const servPrice = data['service'][0];\n            servPrice.price = dataService.price;\n            servPrice.category_image_port = data['category'][0].image_portrait;\n            this.serviceSale = servPrice;\n            this.venta.controls.cRealizador.setValue({\n              id: data['centre'][0]['id'],\n              name: data['centre'][0]['name']\n            });\n            this.venta.controls.service.setValue(this.serviceSale);\n            this.venta.controls.cEmployee.setValue({\n              id: data['centre_employee_id'][0]['id'],\n              name: data['centre_employee_id'][0]['name']\n            });\n            this.venta.controls.quantity.setValue(data['quantity']);\n            this.venta.controls.idType.setValue(data['idType']);\n            this.venta.controls.patientId.setValue(data['patientId']);\n            this.venta.controls.patientName.setValue(data['patient_name']);\n            this.venta.controls.observaciones.setValue('');\n            this.notification.cancelLoad();\n            this.utils.cancelControlNotifications();\n            this.servicesOfCenter();\n            this.venta.updateValueAndValidity();\n            this.getDiscountsServices();\n          });\n        }).catch(ex => {\n          this.notification.baseThrowAlerts(SALE_ERROR.title, ERROR_RECONFIGURE_SALE);\n        });\n      });\n    }\n    /**\n     * Crea y retorna el registro de venta final\n     *\n     * @returns Obj venta\n     */\n    buildingSale() {\n      return {\n        employee: this.employeeSvc.employee.username,\n        idType: this.venta.controls.idType.value,\n        patientId: this.venta.controls.patientId.value,\n        patient_name: this.venta.controls.patientName.value,\n        centre_id: this.venta.controls.cRealizador.value.id,\n        centre_employee_id: this.venta.controls.cEmployee.value.id,\n        service_id: this.venta.controls.service.value.id,\n        quantity: this.venta.controls.quantity.value,\n        tracking_date: moment().format(DAY_MONTH_YEAR_FORMAT),\n        observations: this.venta.controls.observaciones.value,\n        discount: this.venta.controls.discount.value.name\n      };\n    }\n    /**\n     * Metodo de ayuda para mostrar/ocultar opciones\n     * en formulario\n     *\n     * @param value Condicional\n     */\n    showUnshowDataPatient(value) {\n      this.active = value;\n      if (this.active) {\n        this.content.scrollByPoint(0, 250, SCROLLING_TIME);\n      }\n    }\n  }\n  NewSaleComponent.ɵfac = function NewSaleComponent_Factory(t) {\n    return new (t || NewSaleComponent)(i0.ɵɵdirectiveInject(i1.NotificationsService), i0.ɵɵdirectiveInject(i2.NavParams), i0.ɵɵdirectiveInject(i3.UtilsService), i0.ɵɵdirectiveInject(i4.CentersUtilsService), i0.ɵɵdirectiveInject(i5.EmployeeService), i0.ɵɵdirectiveInject(i6.DatacheckService), i0.ɵɵdirectiveInject(i7.TextTransformPipe), i0.ɵɵdirectiveInject(i8.PageService));\n  };\n  NewSaleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NewSaleComponent,\n    selectors: [[\"app-new-sale\"]],\n    viewQuery: function NewSaleComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectSV = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectCR = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectCD = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([TextTransformPipe])],\n    decls: 53,\n    vars: 16,\n    consts: [[\"title\", \"REGISTRO DE VENTA\"], [\"lines\", \"none\"], [\"name\", \"close\", \"slot\", \"start\", \"class\", \"icClear\", 3, \"click\", 4, \"ngIf\"], [1, \"configuradorLbl\"], [\"content\", \"\"], [3, \"formGroup\"], [1, \"containerTypeServ\"], [\"size\", \"4\"], [\"for\", \"quantity\"], [\"formControlName\", \"quantity\", \"type\", \"number\", \"name\", \"quantity\", \"id\", \"quantity\", \"min\", \"1\", 1, \"inputForm\"], [\"size\", \"8\"], [\"for\", \"date\"], [\"id\", \"dateServ\"], [\"id\", \"noteDate\", \"name\", \"date\"], [4, \"ngIf\"], [\"for\", \"descriptor\"], [\"formControlName\", \"cEmployee\", \"name\", \"cEmployee\", \"interface\", \"action-sheet\", \"cancelText\", \"CANCELAR\", \"placeholder\", \"Seleccione el centro prescriptor\", 3, \"ionChange\"], [\"selectCD\", \"\"], [\"name\", \"descriptor\", 3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\", \"ngIfElse\"], [\"idPaciente\", \"\"], [\"for\", \"patientName\"], [\"formControlName\", \"patientName\", \"type\", \"text\", \"name\", \"patientName\", \"placeholder\", \"Nombre del paciente\", 1, \"inputForm\"], [\"class\", \"containerTypeServ\", 4, \"ngIf\"], [1, \"containerDiscount\"], [\"formControlName\", \"discount\", \"name\", \"discount\", \"interface\", \"action-sheet\", \"cancelText\", \"CANCELAR\", \"placeholder\", \"Seleccione el descuento a aplicar\"], [\"expand\", \"block\", \"type\", \"submit\", \"name\", \"submit\", \"id\", \"submit\", 3, \"disabled\", \"click\"], [\"name\", \"thumbs-up\", \"slot\", \"start\", 1, \"home\"], [1, \"lblBtn\"], [\"name\", \"close\", \"slot\", \"start\", 1, \"icClear\", 3, \"click\"], [\"for\", \"producer\"], [\"formControlName\", \"cRealizador\", \"name\", \"cRealizador\", \"interface\", \"action-sheet\", \"cancelText\", \"CANCELAR\", \"placeholder\", \"Seleccione el centro realizador\", 3, \"ionChange\"], [\"name\", \"producer\", 3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"service\", \"name\", \"service\", \"interface\", \"action-sheet\", \"cancelText\", \"CANCELAR\", \"placeholder\", \"Seleccione un servicio\", 1, \"optionSale\", 3, \"ionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"name\", \"producer\", 3, \"value\"], [3, \"value\"], [\"selectSV\", \"\"], [\"selectCR\", \"\"], [\"name\", \"descriptor\", 3, \"value\"], [\"formControlName\", \"idType\", \"mode\", \"md\"], [\"size\", \"4\", 4, \"ngFor\", \"ngForOf\"], [1, \"optRadio\"], [1, \"changingValues\", 3, \"click\"], [\"for\", \"pacienteId\"], [\"formControlName\", \"patientId\", \"name\", \"pacienteId\", \"id\", \"typePatient\", 3, \"minlength\", \"type\", \"ionBlur\"], [\"for\", \"observaciones\"], [\"formControlName\", \"observaciones\", \"name\", \"observaciones\", \"autoGrow\", \"true\", \"autocapitalize\", \"sentences\", \"cols\", \"3\", \"rows\", \"3\", \"inputmode\", \"text\", \"placeholder\", \"Indicar observaciones aqu\\u00ED\", \"maxlength\", \"120\"]],\n    template: function NewSaleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-item\", 1);\n        i0.ɵɵtemplate(2, NewSaleComponent_ion_icon_2_Template, 1, 0, \"ion-icon\", 2);\n        i0.ɵɵelementStart(3, \"ion-note\", 3);\n        i0.ɵɵtext(4, \" CONFIGURADOR DE SERVICIO \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"ion-content\", null, 4)(7, \"form\", 5)(8, \"div\", 6)(9, \"ion-row\")(10, \"ion-col\", 7)(11, \"ion-label\", 8);\n        i0.ɵɵtext(12, \"CANTIDAD*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"ion-input\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-col\", 10)(15, \"ion-label\", 11);\n        i0.ɵɵtext(16, \"FECHA\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 12)(18, \"ion-note\", 13);\n        i0.ɵɵtext(19);\n        i0.ɵɵpipe(20, \"uppercase\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵtemplate(21, NewSaleComponent_div_21_Template, 11, 3, \"div\", 14);\n        i0.ɵɵtemplate(22, NewSaleComponent_div_22_Template, 13, 3, \"div\", 14);\n        i0.ɵɵelementStart(23, \"div\", 6)(24, \"ion-label\", 15);\n        i0.ɵɵtext(25, \"CENTRO PRESCRIPTOR*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"ion-select\", 16, 17);\n        i0.ɵɵlistener(\"ionChange\", function NewSaleComponent_Template_ion_select_ionChange_26_listener($event) {\n          return ctx.checkService($event);\n        });\n        i0.ɵɵtemplate(28, NewSaleComponent_ion_select_option_28_Template, 2, 2, \"ion-select-option\", 18);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(29, \"br\");\n        i0.ɵɵelementStart(30, \"div\", 6);\n        i0.ɵɵtemplate(31, NewSaleComponent_div_31_Template, 6, 1, \"div\", 19);\n        i0.ɵɵtemplate(32, NewSaleComponent_ng_template_32_Template, 5, 3, \"ng-template\", null, 20, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"div\", 6)(35, \"ion-label\", 21);\n        i0.ɵɵtext(36, \"NOMBRE DEL PACIENTE*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(37, \"ion-input\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(38, NewSaleComponent_div_38_Template, 4, 0, \"div\", 23);\n        i0.ɵɵelement(39, \"hr\")(40, \"br\");\n        i0.ɵɵelementStart(41, \"div\", 24)(42, \"ion-label\", 15);\n        i0.ɵɵtext(43, \"DESCUENTO\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"ion-select\", 25);\n        i0.ɵɵtemplate(45, NewSaleComponent_ion_select_option_45_Template, 2, 2, \"ion-select-option\", 18);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(46, \"br\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(47, \"ion-toolbar\")(48, \"ion-grid\")(49, \"ion-button\", 26);\n        i0.ɵɵlistener(\"click\", function NewSaleComponent_Template_ion_button_click_49_listener() {\n          return ctx.sendSale();\n        });\n        i0.ɵɵelement(50, \"ion-icon\", 27);\n        i0.ɵɵelementStart(51, \"ion-note\", 28);\n        i0.ɵɵtext(52, \"CONFIRMAR DATOS\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        const _r7 = i0.ɵɵreference(33);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.venta.valid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.venta);\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 14, ctx.venta.controls.fechaVenta.value));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.serviceSale == undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.serviceSale != undefined);\n        i0.ɵɵadvance(4);\n        i0.ɵɵattribute(\"disabled\", ctx.venta.controls.service.value == undefined);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.employeeCenters);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.venta.controls.idType.value == undefined)(\"ngIfElse\", _r7);\n        i0.ɵɵadvance(6);\n        i0.ɵɵattribute(\"disabled\", ctx.venta.controls.patientId.value == undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.active);\n        i0.ɵɵadvance(6);\n        i0.ɵɵattribute(\"disabled\", ctx.venta.controls.patientName.value == undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.discountAvailables);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.venta.valid);\n      }\n    },\n    dependencies: [i9.NgForOf, i9.NgIf, i10.ɵNgNoValidate, i10.NgControlStatus, i10.NgControlStatusGroup, i10.MinLengthValidator, i10.MaxLengthValidator, i10.FormGroupDirective, i10.FormControlName, i2.IonButton, i2.IonCol, i2.IonContent, i2.IonGrid, i2.IonIcon, i2.IonInput, i2.IonItem, i2.IonLabel, i2.IonNote, i2.IonRadio, i2.IonRadioGroup, i2.IonRow, i2.IonSelect, i2.IonSelectOption, i2.IonTextarea, i2.IonToolbar, i2.NumericValueAccessor, i2.RadioValueAccessor, i2.SelectValueAccessor, i2.TextValueAccessor, i11.HeaderComponent, i9.UpperCasePipe],\n    styles: [\"@media (min-width: 320px) and (max-width: 767px){.optRadio[_ngcontent-%COMP%]{font-size:x-small}}@media (min-width: 768px) and (max-width: 1280px){.optRadio[_ngcontent-%COMP%]{font-size:small}}@media (min-width: 1281px){.optRadio[_ngcontent-%COMP%]{font-size:small}}ion-icon[_ngcontent-%COMP%]{color:#fff}ion-item[_ngcontent-%COMP%]{text-align:center}ion-card-header[_ngcontent-%COMP%]{text-align:center;font-weight:700;font-family:Franklin Gothic Medium,Arial Narrow,Arial,sans-serif;font-size:medium;color:var(--ion-color-icot)}ion-select[_ngcontent-%COMP%]{border:3px solid var(--ion-color-icot);margin-top:5px;font-weight:700;font-size:small;font-family:monospace;--placeholder-color: var(--ion-color-myblack)}ion-label[_ngcontent-%COMP%]{font-size:x-small;font-weight:700;font-family:Franklin Gothic Medium,Arial Narrow,Arial,sans-serif}ion-radio-group[_ngcontent-%COMP%]{display:block;text-align:center}ion-radio[_ngcontent-%COMP%]{margin-right:10px;--color: var(--ion-color-icot)}ion-input[_ngcontent-%COMP%]{border:3px solid var(--ion-color-icot);font-weight:700;font-family:monospace;--placeholder-color: var(--ion-color-myblack);min-height:40px}ion-textarea[_ngcontent-%COMP%]{border:3px solid var(--ion-color-icot);font-weight:700;font-family:monospace;padding:5px;--placeholder-color: var(--ion-color-myblack)}ion-button[_ngcontent-%COMP%]{--background: var(--ion-color-icot);--background-hover: var(--ion-color-icot);--background-activated: var(--ion-color-icot);--color-hover: white;--color: white;margin-top:1em;margin-bottom:1em;text-align:center;font-weight:700;font-size:small}hr[_ngcontent-%COMP%]{background-color:var(--ion-color-icot);height:3px;margin-top:1em;margin-left:1em;margin-right:1em}form[_ngcontent-%COMP%]{margin-top:16px}.backServiceCard[_ngcontent-%COMP%]{color:var(--ion-color-icot);float:left;margin-left:.2em;margin-top:.2em}.serviceDate[_ngcontent-%COMP%]{--background: var(--ion-color-icot);float:right!important;font-family:Courier New,Courier,monospace;font-size:small;margin-right:1em!important;font-weight:700}.ventaServiceStl[_ngcontent-%COMP%]{padding-top:1em;padding-bottom:0}.icClear[_ngcontent-%COMP%]{color:var(--ion-color-icot)}.configuradorLbl[_ngcontent-%COMP%]{width:100%;font-size:medium;font-weight:900;font-family:Franklin Gothic Medium,Arial Narrow,Arial,sans-serif;text-align:center;color:var(--ion-color-icot)}#quantity[_ngcontent-%COMP%]{text-align:center}.containerTypeServ[_ngcontent-%COMP%], .containerDiscount[_ngcontent-%COMP%]{display:block;margin-bottom:.5em;margin-left:1em;margin-right:1em}#dateServ[_ngcontent-%COMP%]{margin-top:16px;text-align:center;height:100%}#noteDate[_ngcontent-%COMP%]{color:var(--ion-color-icot);font-weight:900;font-size:large;font-family:Gill Sans,Gill Sans MT,Calibri,Trebuchet MS,sans-serif}.optRadio[_ngcontent-%COMP%]{margin-right:.3em;font-weight:700}.changingValues[_ngcontent-%COMP%]{float:right;color:var(--ion-color-icot)}.inputForm[_ngcontent-%COMP%]{margin-top:5px}.lblBtn[_ngcontent-%COMP%]{color:#fff}\"]\n  });\n  return NewSaleComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}